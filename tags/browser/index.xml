<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>browser on anvbis</title><link>https://anvbis.github.io/tags/browser/</link><description>Recent content in browser on anvbis</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><lastBuildDate>Sun, 08 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://anvbis.github.io/tags/browser/index.xml" rel="self" type="application/rss+xml"/><item><title>Exploring Historical V8 Heap Sandbox Escapes</title><link>https://anvbis.github.io/posts/exploring-historical-v8-heap-sandbox-escapes/</link><pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate><guid>https://anvbis.github.io/posts/exploring-historical-v8-heap-sandbox-escapes/</guid><description>Motivation In anticipation of the future implementation of CFI on code_entry_point fields within function objects (the vector by which most publicly known heap sandbox escapes currently occur), I wanted to explore some patched sandbox escapes that have been found in the past.
In this post I&amp;rsquo;ll be looking at the following patches:
[sandbox] Remove a number of native allocations from WasmInstanceObject [sandbox] Introduce BoundedSize References [sandbox] Remove a number of native allocations from WasmInstanceObject [sandbox] Introduce BoundedSize</description></item><item><title>Root Cause Analysis of CVE-2021-21224</title><link>https://anvbis.github.io/posts/root-cause-analysis-of-cve-2021-21224/</link><pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate><guid>https://anvbis.github.io/posts/root-cause-analysis-of-cve-2021-21224/</guid><description>Overview An incorrect optimization in TurboFan&amp;rsquo;s representation changer results in Int64 values being erroneously truncated to Int32 values.
I figured this bug would be a great way to further explore TurboFan&amp;rsquo;s simplified lowering phase, and learn more about representation change internals.
You can find the relevant chromium bug report here.
Proof of Concept Below is the proof-of-concept that was provided in the original issue. I&amp;rsquo;ve reformatted it a little in order to make it a bit more readable, but the code is the same.</description></item><item><title>Code Execution in Chromium's V8 Heap Sandbox</title><link>https://anvbis.github.io/posts/code-execution-in-chromiums-v8-heap-sandbox/</link><pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate><guid>https://anvbis.github.io/posts/code-execution-in-chromiums-v8-heap-sandbox/</guid><description>Overview The V8 heap sandbox has been around for quite some time now, and while it initially broke several methods used to gain code execution, new methods have risen to take their place.
I thought it would be worthwile to detail one such method in an article. I&amp;rsquo;ve seen a very limited amount of posts on this particular topic, and what I have seen has been pretty poorly explained. This is mostly for my own reference, but anyone is welcome to learn from it.</description></item></channel></rss>